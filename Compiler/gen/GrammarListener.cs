//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/Janus/source/repos/p4/Grammar\Grammar.g4 by ANTLR 4.9.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Compiler {
using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="GrammarParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.1")]
[System.CLSCompliant(false)]
public interface IGrammarListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.prog"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProg([NotNull] GrammarParser.ProgContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.prog"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProg([NotNull] GrammarParser.ProgContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.lines"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLines([NotNull] GrammarParser.LinesContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.lines"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLines([NotNull] GrammarParser.LinesContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.dcl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDcl([NotNull] GrammarParser.DclContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.dcl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDcl([NotNull] GrammarParser.DclContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStmt([NotNull] GrammarParser.StmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStmt([NotNull] GrammarParser.StmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.expr_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpr_stmt([NotNull] GrammarParser.Expr_stmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.expr_stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpr_stmt([NotNull] GrammarParser.Expr_stmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.logical_OR_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLogical_OR_expr([NotNull] GrammarParser.Logical_OR_exprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.logical_OR_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLogical_OR_expr([NotNull] GrammarParser.Logical_OR_exprContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.logical_AND_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLogical_AND_expr([NotNull] GrammarParser.Logical_AND_exprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.logical_AND_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLogical_AND_expr([NotNull] GrammarParser.Logical_AND_exprContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.equals_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEquals_expr([NotNull] GrammarParser.Equals_exprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.equals_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEquals_expr([NotNull] GrammarParser.Equals_exprContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.notequals_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNotequals_expr([NotNull] GrammarParser.Notequals_exprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.notequals_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNotequals_expr([NotNull] GrammarParser.Notequals_exprContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.relational_gthan_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRelational_gthan_expr([NotNull] GrammarParser.Relational_gthan_exprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.relational_gthan_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRelational_gthan_expr([NotNull] GrammarParser.Relational_gthan_exprContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.relational_lthan_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRelational_lthan_expr([NotNull] GrammarParser.Relational_lthan_exprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.relational_lthan_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRelational_lthan_expr([NotNull] GrammarParser.Relational_lthan_exprContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.relational_gethan_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRelational_gethan_expr([NotNull] GrammarParser.Relational_gethan_exprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.relational_gethan_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRelational_gethan_expr([NotNull] GrammarParser.Relational_gethan_exprContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.relational_lethan_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRelational_lethan_expr([NotNull] GrammarParser.Relational_lethan_exprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.relational_lethan_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRelational_lethan_expr([NotNull] GrammarParser.Relational_lethan_exprContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.addition_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAddition_expr([NotNull] GrammarParser.Addition_exprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.addition_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAddition_expr([NotNull] GrammarParser.Addition_exprContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.subtraction_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSubtraction_expr([NotNull] GrammarParser.Subtraction_exprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.subtraction_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSubtraction_expr([NotNull] GrammarParser.Subtraction_exprContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.multiplication_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMultiplication_expr([NotNull] GrammarParser.Multiplication_exprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.multiplication_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMultiplication_expr([NotNull] GrammarParser.Multiplication_exprContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.division_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDivision_expr([NotNull] GrammarParser.Division_exprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.division_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDivision_expr([NotNull] GrammarParser.Division_exprContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.power_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPower_expr([NotNull] GrammarParser.Power_exprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.power_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPower_expr([NotNull] GrammarParser.Power_exprContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFactor([NotNull] GrammarParser.FactorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFactor([NotNull] GrammarParser.FactorContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.not_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNot_expr([NotNull] GrammarParser.Not_exprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.not_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNot_expr([NotNull] GrammarParser.Not_exprContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.method_invocation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMethod_invocation([NotNull] GrammarParser.Method_invocationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.method_invocation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMethod_invocation([NotNull] GrammarParser.Method_invocationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArgument_list([NotNull] GrammarParser.Argument_listContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArgument_list([NotNull] GrammarParser.Argument_listContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterType([NotNull] GrammarParser.TypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitType([NotNull] GrammarParser.TypeContext context);
}
} // namespace Compiler
