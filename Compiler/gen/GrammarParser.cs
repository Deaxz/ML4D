//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/Janus/source/repos/p4/Grammar\Grammar.g4 by ANTLR 4.9.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Compiler {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.1")]
[System.CLSCompliant(false)]
public partial class GrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		GRAD=1, NOT=2, AND=3, OR=4, VOID=5, DOT=6, WHILE=7, DOUBLE=8, INT=9, BOOL=10, 
		BOOLVAL=11, RETURN=12, BACKWARDS=13, ASSIGN=14, POWER=15, MUL=16, DIV=17, 
		PLUS=18, MINUS=19, COMMA=20, LPAREN=21, RPAREN=22, LBRACE=23, RBRACE=24, 
		LBRACK=25, RBRACK=26, EQUALS=27, NOTEQUALS=28, GTHAN=29, LTHAN=30, GETHAN=31, 
		LETHAN=32, SEMICOLON=33, WS=34, INUM=35, FNUM=36, ID=37;
	public const int
		RULE_prog = 0, RULE_lines = 1, RULE_dcl = 2, RULE_stmt = 3, RULE_expr_stmt = 4, 
		RULE_logical_OR_expr = 5, RULE_logical_AND_expr = 6, RULE_equals_expr = 7, 
		RULE_notequals_expr = 8, RULE_relational_gthan_expr = 9, RULE_relational_lthan_expr = 10, 
		RULE_relational_gethan_expr = 11, RULE_relational_lethan_expr = 12, RULE_addition_expr = 13, 
		RULE_subtraction_expr = 14, RULE_multiplication_expr = 15, RULE_division_expr = 16, 
		RULE_power_expr = 17, RULE_factor = 18, RULE_not_expr = 19, RULE_method_invocation = 20, 
		RULE_argument_list = 21, RULE_type = 22;
	public static readonly string[] ruleNames = {
		"prog", "lines", "dcl", "stmt", "expr_stmt", "logical_OR_expr", "logical_AND_expr", 
		"equals_expr", "notequals_expr", "relational_gthan_expr", "relational_lthan_expr", 
		"relational_gethan_expr", "relational_lethan_expr", "addition_expr", "subtraction_expr", 
		"multiplication_expr", "division_expr", "power_expr", "factor", "not_expr", 
		"method_invocation", "argument_list", "type"
	};

	private static readonly string[] _LiteralNames = {
		null, "'grad'", "'not'", "'and'", "'or'", "'void'", "'.'", "'while'", 
		"'double'", "'int'", "'bool'", null, "'return'", "'<-'", "'='", "'**'", 
		"'*'", "'/'", "'+'", "'-'", "','", "'('", "')'", "'{'", "'}'", "'['", 
		"']'", "'=='", "'!='", "'>'", "'<'", "'>='", "'<='", "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "GRAD", "NOT", "AND", "OR", "VOID", "DOT", "WHILE", "DOUBLE", "INT", 
		"BOOL", "BOOLVAL", "RETURN", "BACKWARDS", "ASSIGN", "POWER", "MUL", "DIV", 
		"PLUS", "MINUS", "COMMA", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACK", 
		"RBRACK", "EQUALS", "NOTEQUALS", "GTHAN", "LTHAN", "GETHAN", "LETHAN", 
		"SEMICOLON", "WS", "INUM", "FNUM", "ID"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Grammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static GrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public GrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public GrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LinesContext lines() {
			return GetRuleContext<LinesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(GrammarParser.Eof, 0); }
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46;
			lines();
			State = 47;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LinesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DclContext dcl() {
			return GetRuleContext<DclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(GrammarParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LinesContext lines() {
			return GetRuleContext<LinesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt() {
			return GetRuleContext<StmtContext>(0);
		}
		public LinesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lines; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterLines(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitLines(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLines(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LinesContext lines() {
		LinesContext _localctx = new LinesContext(Context, State);
		EnterRule(_localctx, 2, RULE_lines);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 57;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VOID:
			case DOUBLE:
			case INT:
			case BOOL:
				{
				State = 49;
				dcl();
				State = 50;
				Match(SEMICOLON);
				State = 51;
				lines();
				}
				break;
			case NOT:
			case WHILE:
			case BOOLVAL:
			case RETURN:
			case LPAREN:
			case INUM:
			case FNUM:
			case ID:
				{
				State = 53;
				stmt();
				State = 54;
				Match(SEMICOLON);
				State = 55;
				lines();
				}
				break;
			case Eof:
			case RBRACE:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(GrammarParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(GrammarParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(GrammarParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_stmtContext expr_stmt() {
			return GetRuleContext<Expr_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(GrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(GrammarParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(GrammarParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LinesContext lines() {
			return GetRuleContext<LinesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(GrammarParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(GrammarParser.VOID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(GrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(GrammarParser.COMMA, i);
		}
		public DclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dcl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DclContext dcl() {
		DclContext _localctx = new DclContext(Context, State);
		EnterRule(_localctx, 4, RULE_dcl);
		int _la;
		try {
			State = 89;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 59;
				type();
				State = 60;
				Match(ID);
				State = 63;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASSIGN) {
					{
					State = 61;
					Match(ASSIGN);
					State = 62;
					expr_stmt();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 67;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DOUBLE:
				case INT:
				case BOOL:
					{
					State = 65;
					type();
					}
					break;
				case VOID:
					{
					State = 66;
					Match(VOID);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 69;
				Match(ID);
				State = 70;
				Match(LPAREN);
				State = 82;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DOUBLE) | (1L << INT) | (1L << BOOL))) != 0)) {
					{
					State = 71;
					type();
					State = 72;
					Match(ID);
					State = 79;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 73;
						Match(COMMA);
						State = 74;
						type();
						State = 75;
						Match(ID);
						}
						}
						State = 81;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 84;
				Match(RPAREN);
				State = 85;
				Match(LBRACE);
				State = 86;
				lines();
				State = 87;
				Match(RBRACE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GrammarParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(GrammarParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_stmtContext expr_stmt() {
			return GetRuleContext<Expr_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(GrammarParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(GrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(GrammarParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(GrammarParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LinesContext lines() {
			return GetRuleContext<LinesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(GrammarParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BACKWARDS() { return GetToken(GrammarParser.BACKWARDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(GrammarParser.RETURN, 0); }
		public StmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtContext stmt() {
		StmtContext _localctx = new StmtContext(Context, State);
		EnterRule(_localctx, 6, RULE_stmt);
		try {
			State = 107;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 91;
				Match(ID);
				State = 92;
				Match(ASSIGN);
				State = 93;
				expr_stmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 94;
				Match(WHILE);
				State = 95;
				Match(LPAREN);
				State = 96;
				expr_stmt();
				State = 97;
				Match(RPAREN);
				State = 98;
				Match(LBRACE);
				State = 99;
				lines();
				State = 100;
				Match(RBRACE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 102;
				Match(ID);
				State = 103;
				Match(BACKWARDS);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 104;
				Match(RETURN);
				State = 105;
				expr_stmt();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 106;
				expr_stmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Logical_OR_exprContext logical_OR_expr() {
			return GetRuleContext<Logical_OR_exprContext>(0);
		}
		public Expr_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterExpr_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitExpr_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expr_stmtContext expr_stmt() {
		Expr_stmtContext _localctx = new Expr_stmtContext(Context, State);
		EnterRule(_localctx, 8, RULE_expr_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			logical_OR_expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Logical_OR_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Logical_AND_exprContext logical_AND_expr() {
			return GetRuleContext<Logical_AND_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Logical_OR_exprContext logical_OR_expr() {
			return GetRuleContext<Logical_OR_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(GrammarParser.OR, 0); }
		public Logical_OR_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logical_OR_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterLogical_OR_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitLogical_OR_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogical_OR_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Logical_OR_exprContext logical_OR_expr() {
		return logical_OR_expr(0);
	}

	private Logical_OR_exprContext logical_OR_expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Logical_OR_exprContext _localctx = new Logical_OR_exprContext(Context, _parentState);
		Logical_OR_exprContext _prevctx = _localctx;
		int _startState = 10;
		EnterRecursionRule(_localctx, 10, RULE_logical_OR_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 112;
			logical_AND_expr(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 119;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Logical_OR_exprContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_logical_OR_expr);
					State = 114;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 115;
					Match(OR);
					State = 116;
					logical_AND_expr(0);
					}
					} 
				}
				State = 121;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Logical_AND_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Equals_exprContext equals_expr() {
			return GetRuleContext<Equals_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Notequals_exprContext notequals_expr() {
			return GetRuleContext<Notequals_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Logical_AND_exprContext logical_AND_expr() {
			return GetRuleContext<Logical_AND_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(GrammarParser.AND, 0); }
		public Logical_AND_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logical_AND_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterLogical_AND_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitLogical_AND_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogical_AND_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Logical_AND_exprContext logical_AND_expr() {
		return logical_AND_expr(0);
	}

	private Logical_AND_exprContext logical_AND_expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Logical_AND_exprContext _localctx = new Logical_AND_exprContext(Context, _parentState);
		Logical_AND_exprContext _prevctx = _localctx;
		int _startState = 12;
		EnterRecursionRule(_localctx, 12, RULE_logical_AND_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 125;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				State = 123;
				equals_expr();
				}
				break;
			case 2:
				{
				State = 124;
				notequals_expr();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 132;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Logical_AND_exprContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_logical_AND_expr);
					State = 127;
					if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
					State = 128;
					Match(AND);
					State = 129;
					equals_expr();
					}
					} 
				}
				State = 134;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Equals_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(GrammarParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Addition_exprContext[] addition_expr() {
			return GetRuleContexts<Addition_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Addition_exprContext addition_expr(int i) {
			return GetRuleContext<Addition_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Subtraction_exprContext[] subtraction_expr() {
			return GetRuleContexts<Subtraction_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Subtraction_exprContext subtraction_expr(int i) {
			return GetRuleContext<Subtraction_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Relational_gthan_exprContext relational_gthan_expr() {
			return GetRuleContext<Relational_gthan_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Relational_lthan_exprContext relational_lthan_expr() {
			return GetRuleContext<Relational_lthan_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Relational_gethan_exprContext relational_gethan_expr() {
			return GetRuleContext<Relational_gethan_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Relational_lethan_exprContext relational_lethan_expr() {
			return GetRuleContext<Relational_lethan_exprContext>(0);
		}
		public Equals_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equals_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterEquals_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitEquals_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquals_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Equals_exprContext equals_expr() {
		Equals_exprContext _localctx = new Equals_exprContext(Context, State);
		EnterRule(_localctx, 14, RULE_equals_expr);
		try {
			State = 148;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 137;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
				case 1:
					{
					State = 135;
					addition_expr();
					}
					break;
				case 2:
					{
					State = 136;
					subtraction_expr();
					}
					break;
				}
				State = 139;
				Match(EQUALS);
				State = 142;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
				case 1:
					{
					State = 140;
					addition_expr();
					}
					break;
				case 2:
					{
					State = 141;
					subtraction_expr();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 144;
				relational_gthan_expr();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 145;
				relational_lthan_expr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 146;
				relational_gethan_expr();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 147;
				relational_lethan_expr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Notequals_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTEQUALS() { return GetToken(GrammarParser.NOTEQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Addition_exprContext[] addition_expr() {
			return GetRuleContexts<Addition_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Addition_exprContext addition_expr(int i) {
			return GetRuleContext<Addition_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Subtraction_exprContext[] subtraction_expr() {
			return GetRuleContexts<Subtraction_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Subtraction_exprContext subtraction_expr(int i) {
			return GetRuleContext<Subtraction_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Relational_gthan_exprContext relational_gthan_expr() {
			return GetRuleContext<Relational_gthan_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Relational_lthan_exprContext relational_lthan_expr() {
			return GetRuleContext<Relational_lthan_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Relational_gethan_exprContext relational_gethan_expr() {
			return GetRuleContext<Relational_gethan_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Relational_lethan_exprContext relational_lethan_expr() {
			return GetRuleContext<Relational_lethan_exprContext>(0);
		}
		public Notequals_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notequals_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterNotequals_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitNotequals_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotequals_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Notequals_exprContext notequals_expr() {
		Notequals_exprContext _localctx = new Notequals_exprContext(Context, State);
		EnterRule(_localctx, 16, RULE_notequals_expr);
		try {
			State = 163;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 152;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
				case 1:
					{
					State = 150;
					addition_expr();
					}
					break;
				case 2:
					{
					State = 151;
					subtraction_expr();
					}
					break;
				}
				State = 154;
				Match(NOTEQUALS);
				State = 157;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
				case 1:
					{
					State = 155;
					addition_expr();
					}
					break;
				case 2:
					{
					State = 156;
					subtraction_expr();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 159;
				relational_gthan_expr();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 160;
				relational_lthan_expr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 161;
				relational_gethan_expr();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 162;
				relational_lethan_expr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Relational_gthan_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTHAN() { return GetToken(GrammarParser.GTHAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Addition_exprContext[] addition_expr() {
			return GetRuleContexts<Addition_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Addition_exprContext addition_expr(int i) {
			return GetRuleContext<Addition_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Subtraction_exprContext[] subtraction_expr() {
			return GetRuleContexts<Subtraction_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Subtraction_exprContext subtraction_expr(int i) {
			return GetRuleContext<Subtraction_exprContext>(i);
		}
		public Relational_gthan_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relational_gthan_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterRelational_gthan_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitRelational_gthan_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelational_gthan_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Relational_gthan_exprContext relational_gthan_expr() {
		Relational_gthan_exprContext _localctx = new Relational_gthan_exprContext(Context, State);
		EnterRule(_localctx, 18, RULE_relational_gthan_expr);
		try {
			State = 176;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 167;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
				case 1:
					{
					State = 165;
					addition_expr();
					}
					break;
				case 2:
					{
					State = 166;
					subtraction_expr();
					}
					break;
				}
				State = 169;
				Match(GTHAN);
				State = 172;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
				case 1:
					{
					State = 170;
					addition_expr();
					}
					break;
				case 2:
					{
					State = 171;
					subtraction_expr();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 174;
				addition_expr();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 175;
				subtraction_expr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Relational_lthan_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTHAN() { return GetToken(GrammarParser.LTHAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Addition_exprContext[] addition_expr() {
			return GetRuleContexts<Addition_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Addition_exprContext addition_expr(int i) {
			return GetRuleContext<Addition_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Subtraction_exprContext[] subtraction_expr() {
			return GetRuleContexts<Subtraction_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Subtraction_exprContext subtraction_expr(int i) {
			return GetRuleContext<Subtraction_exprContext>(i);
		}
		public Relational_lthan_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relational_lthan_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterRelational_lthan_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitRelational_lthan_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelational_lthan_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Relational_lthan_exprContext relational_lthan_expr() {
		Relational_lthan_exprContext _localctx = new Relational_lthan_exprContext(Context, State);
		EnterRule(_localctx, 20, RULE_relational_lthan_expr);
		try {
			State = 189;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 180;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
				case 1:
					{
					State = 178;
					addition_expr();
					}
					break;
				case 2:
					{
					State = 179;
					subtraction_expr();
					}
					break;
				}
				State = 182;
				Match(LTHAN);
				State = 185;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
				case 1:
					{
					State = 183;
					addition_expr();
					}
					break;
				case 2:
					{
					State = 184;
					subtraction_expr();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 187;
				addition_expr();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 188;
				subtraction_expr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Relational_gethan_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LETHAN() { return GetToken(GrammarParser.LETHAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Addition_exprContext[] addition_expr() {
			return GetRuleContexts<Addition_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Addition_exprContext addition_expr(int i) {
			return GetRuleContext<Addition_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Subtraction_exprContext[] subtraction_expr() {
			return GetRuleContexts<Subtraction_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Subtraction_exprContext subtraction_expr(int i) {
			return GetRuleContext<Subtraction_exprContext>(i);
		}
		public Relational_gethan_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relational_gethan_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterRelational_gethan_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitRelational_gethan_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelational_gethan_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Relational_gethan_exprContext relational_gethan_expr() {
		Relational_gethan_exprContext _localctx = new Relational_gethan_exprContext(Context, State);
		EnterRule(_localctx, 22, RULE_relational_gethan_expr);
		try {
			State = 202;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 193;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
				case 1:
					{
					State = 191;
					addition_expr();
					}
					break;
				case 2:
					{
					State = 192;
					subtraction_expr();
					}
					break;
				}
				State = 195;
				Match(LETHAN);
				State = 198;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
				case 1:
					{
					State = 196;
					addition_expr();
					}
					break;
				case 2:
					{
					State = 197;
					subtraction_expr();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 200;
				addition_expr();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 201;
				subtraction_expr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Relational_lethan_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LETHAN() { return GetToken(GrammarParser.LETHAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Addition_exprContext[] addition_expr() {
			return GetRuleContexts<Addition_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Addition_exprContext addition_expr(int i) {
			return GetRuleContext<Addition_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Subtraction_exprContext[] subtraction_expr() {
			return GetRuleContexts<Subtraction_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Subtraction_exprContext subtraction_expr(int i) {
			return GetRuleContext<Subtraction_exprContext>(i);
		}
		public Relational_lethan_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relational_lethan_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterRelational_lethan_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitRelational_lethan_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelational_lethan_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Relational_lethan_exprContext relational_lethan_expr() {
		Relational_lethan_exprContext _localctx = new Relational_lethan_exprContext(Context, State);
		EnterRule(_localctx, 24, RULE_relational_lethan_expr);
		try {
			State = 215;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 206;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
				case 1:
					{
					State = 204;
					addition_expr();
					}
					break;
				case 2:
					{
					State = 205;
					subtraction_expr();
					}
					break;
				}
				State = 208;
				Match(LETHAN);
				State = 211;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
				case 1:
					{
					State = 209;
					addition_expr();
					}
					break;
				case 2:
					{
					State = 210;
					subtraction_expr();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 213;
				addition_expr();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 214;
				subtraction_expr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Addition_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(GrammarParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Multiplication_exprContext multiplication_expr() {
			return GetRuleContext<Multiplication_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Division_exprContext division_expr() {
			return GetRuleContext<Division_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Addition_exprContext addition_expr() {
			return GetRuleContext<Addition_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Subtraction_exprContext subtraction_expr() {
			return GetRuleContext<Subtraction_exprContext>(0);
		}
		public Addition_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addition_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterAddition_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitAddition_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddition_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Addition_exprContext addition_expr() {
		Addition_exprContext _localctx = new Addition_exprContext(Context, State);
		EnterRule(_localctx, 26, RULE_addition_expr);
		try {
			State = 228;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 219;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
				case 1:
					{
					State = 217;
					multiplication_expr();
					}
					break;
				case 2:
					{
					State = 218;
					division_expr();
					}
					break;
				}
				State = 221;
				Match(PLUS);
				State = 224;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
				case 1:
					{
					State = 222;
					addition_expr();
					}
					break;
				case 2:
					{
					State = 223;
					subtraction_expr();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 226;
				multiplication_expr();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 227;
				division_expr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subtraction_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(GrammarParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Multiplication_exprContext multiplication_expr() {
			return GetRuleContext<Multiplication_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Division_exprContext division_expr() {
			return GetRuleContext<Division_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Addition_exprContext addition_expr() {
			return GetRuleContext<Addition_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Subtraction_exprContext subtraction_expr() {
			return GetRuleContext<Subtraction_exprContext>(0);
		}
		public Subtraction_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subtraction_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterSubtraction_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitSubtraction_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubtraction_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Subtraction_exprContext subtraction_expr() {
		Subtraction_exprContext _localctx = new Subtraction_exprContext(Context, State);
		EnterRule(_localctx, 28, RULE_subtraction_expr);
		try {
			State = 241;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 232;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
				case 1:
					{
					State = 230;
					multiplication_expr();
					}
					break;
				case 2:
					{
					State = 231;
					division_expr();
					}
					break;
				}
				State = 234;
				Match(MINUS);
				State = 237;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
				case 1:
					{
					State = 235;
					addition_expr();
					}
					break;
				case 2:
					{
					State = 236;
					subtraction_expr();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 239;
				multiplication_expr();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 240;
				division_expr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Multiplication_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Power_exprContext power_expr() {
			return GetRuleContext<Power_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL() { return GetToken(GrammarParser.MUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Multiplication_exprContext multiplication_expr() {
			return GetRuleContext<Multiplication_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Division_exprContext division_expr() {
			return GetRuleContext<Division_exprContext>(0);
		}
		public Multiplication_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplication_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterMultiplication_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitMultiplication_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplication_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Multiplication_exprContext multiplication_expr() {
		Multiplication_exprContext _localctx = new Multiplication_exprContext(Context, State);
		EnterRule(_localctx, 30, RULE_multiplication_expr);
		try {
			State = 250;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 243;
				power_expr();
				State = 244;
				Match(MUL);
				State = 247;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
				case 1:
					{
					State = 245;
					multiplication_expr();
					}
					break;
				case 2:
					{
					State = 246;
					division_expr();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 249;
				power_expr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Division_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Power_exprContext power_expr() {
			return GetRuleContext<Power_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(GrammarParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Multiplication_exprContext multiplication_expr() {
			return GetRuleContext<Multiplication_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Division_exprContext division_expr() {
			return GetRuleContext<Division_exprContext>(0);
		}
		public Division_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_division_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterDivision_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitDivision_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivision_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Division_exprContext division_expr() {
		Division_exprContext _localctx = new Division_exprContext(Context, State);
		EnterRule(_localctx, 32, RULE_division_expr);
		try {
			State = 259;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 252;
				power_expr();
				State = 253;
				Match(DIV);
				State = 256;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
				case 1:
					{
					State = 254;
					multiplication_expr();
					}
					break;
				case 2:
					{
					State = 255;
					division_expr();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 258;
				power_expr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Power_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POWER() { return GetToken(GrammarParser.POWER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Power_exprContext power_expr() {
			return GetRuleContext<Power_exprContext>(0);
		}
		public Power_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_power_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterPower_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitPower_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPower_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Power_exprContext power_expr() {
		Power_exprContext _localctx = new Power_exprContext(Context, State);
		EnterRule(_localctx, 34, RULE_power_expr);
		try {
			State = 266;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 261;
				factor();
				State = 262;
				Match(POWER);
				State = 263;
				power_expr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 265;
				factor();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GrammarParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(GrammarParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRAD() { return GetToken(GrammarParser.GRAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INUM() { return GetToken(GrammarParser.INUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FNUM() { return GetToken(GrammarParser.FNUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLVAL() { return GetToken(GrammarParser.BOOLVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Not_exprContext not_expr() {
			return GetRuleContext<Not_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(GrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_stmtContext expr_stmt() {
			return GetRuleContext<Expr_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(GrammarParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Method_invocationContext method_invocation() {
			return GetRuleContext<Method_invocationContext>(0);
		}
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 36, RULE_factor);
		try {
			State = 281;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 268;
				Match(ID);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 269;
				Match(ID);
				State = 270;
				Match(DOT);
				State = 271;
				Match(GRAD);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 272;
				Match(INUM);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 273;
				Match(FNUM);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 274;
				Match(BOOLVAL);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 275;
				not_expr();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 276;
				Match(LPAREN);
				State = 277;
				expr_stmt();
				State = 278;
				Match(RPAREN);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 280;
				method_invocation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Not_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(GrammarParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GrammarParser.ID, 0); }
		public Not_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_not_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterNot_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitNot_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNot_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Not_exprContext not_expr() {
		Not_exprContext _localctx = new Not_exprContext(Context, State);
		EnterRule(_localctx, 38, RULE_not_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 283;
			Match(NOT);
			State = 284;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_invocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GrammarParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(GrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(GrammarParser.RPAREN, 0); }
		public Method_invocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_invocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterMethod_invocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitMethod_invocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod_invocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Method_invocationContext method_invocation() {
		Method_invocationContext _localctx = new Method_invocationContext(Context, State);
		EnterRule(_localctx, 40, RULE_method_invocation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 286;
			Match(ID);
			State = 287;
			Match(LPAREN);
			State = 288;
			argument_list();
			State = 289;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Argument_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expr_stmtContext[] expr_stmt() {
			return GetRuleContexts<Expr_stmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr_stmtContext expr_stmt(int i) {
			return GetRuleContext<Expr_stmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(GrammarParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(GrammarParser.COMMA, i);
		}
		public Argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterArgument_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitArgument_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Argument_listContext argument_list() {
		Argument_listContext _localctx = new Argument_listContext(Context, State);
		EnterRule(_localctx, 42, RULE_argument_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 299;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NOT) | (1L << BOOLVAL) | (1L << LPAREN) | (1L << INUM) | (1L << FNUM) | (1L << ID))) != 0)) {
				{
				State = 291;
				expr_stmt();
				State = 296;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 292;
					Match(COMMA);
					State = 293;
					expr_stmt();
					}
					}
					State = 298;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(GrammarParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(GrammarParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(GrammarParser.DOUBLE, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 44, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 301;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DOUBLE) | (1L << INT) | (1L << BOOL))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 5: return logical_OR_expr_sempred((Logical_OR_exprContext)_localctx, predIndex);
		case 6: return logical_AND_expr_sempred((Logical_AND_exprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool logical_OR_expr_sempred(Logical_OR_exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}
	private bool logical_AND_expr_sempred(Logical_AND_exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 3);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\'', '\x132', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x5', '\x3', '<', '\n', '\x3', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\x42', '\n', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\x46', '\n', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', 'P', '\n', '\x4', '\f', 
		'\x4', '\xE', '\x4', 'S', '\v', '\x4', '\x5', '\x4', 'U', '\n', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x5', '\x4', '\\', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 'n', '\n', '\x5', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\a', '\a', 'x', '\n', '\a', '\f', '\a', 
		'\xE', '\a', '{', '\v', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', 
		'\b', '\x80', '\n', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', 
		'\b', '\x85', '\n', '\b', '\f', '\b', '\xE', '\b', '\x88', '\v', '\b', 
		'\x3', '\t', '\x3', '\t', '\x5', '\t', '\x8C', '\n', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x5', '\t', '\x91', '\n', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\x97', '\n', '\t', 
		'\x3', '\n', '\x3', '\n', '\x5', '\n', '\x9B', '\n', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x5', '\n', '\xA0', '\n', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', '\xA6', '\n', '\n', 
		'\x3', '\v', '\x3', '\v', '\x5', '\v', '\xAA', '\n', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x5', '\v', '\xAF', '\n', '\v', '\x3', '\v', 
		'\x3', '\v', '\x5', '\v', '\xB3', '\n', '\v', '\x3', '\f', '\x3', '\f', 
		'\x5', '\f', '\xB7', '\n', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x5', '\f', '\xBC', '\n', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', 
		'\xC0', '\n', '\f', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\xC4', '\n', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\xC9', '\n', 
		'\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\xCD', '\n', '\r', '\x3', 
		'\xE', '\x3', '\xE', '\x5', '\xE', '\xD1', '\n', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\xD6', '\n', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x5', '\xE', '\xDA', '\n', '\xE', '\x3', '\xF', 
		'\x3', '\xF', '\x5', '\xF', '\xDE', '\n', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x5', '\xF', '\xE3', '\n', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x5', '\xF', '\xE7', '\n', '\xF', '\x3', '\x10', '\x3', 
		'\x10', '\x5', '\x10', '\xEB', '\n', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x5', '\x10', '\xF0', '\n', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x5', '\x10', '\xF4', '\n', '\x10', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\xFA', '\n', '\x11', '\x3', 
		'\x11', '\x5', '\x11', '\xFD', '\n', '\x11', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\x103', '\n', '\x12', '\x3', 
		'\x12', '\x5', '\x12', '\x106', '\n', '\x12', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\x10D', '\n', 
		'\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\x11C', 
		'\n', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\a', '\x17', '\x129', '\n', '\x17', '\f', 
		'\x17', '\xE', '\x17', '\x12C', '\v', '\x17', '\x5', '\x17', '\x12E', 
		'\n', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x2', '\x4', 
		'\f', '\xE', '\x19', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', 
		'\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', 
		'&', '(', '*', ',', '.', '\x2', '\x3', '\x3', '\x2', '\n', '\f', '\x2', 
		'\x15A', '\x2', '\x30', '\x3', '\x2', '\x2', '\x2', '\x4', ';', '\x3', 
		'\x2', '\x2', '\x2', '\x6', '[', '\x3', '\x2', '\x2', '\x2', '\b', 'm', 
		'\x3', '\x2', '\x2', '\x2', '\n', 'o', '\x3', '\x2', '\x2', '\x2', '\f', 
		'q', '\x3', '\x2', '\x2', '\x2', '\xE', '\x7F', '\x3', '\x2', '\x2', '\x2', 
		'\x10', '\x96', '\x3', '\x2', '\x2', '\x2', '\x12', '\xA5', '\x3', '\x2', 
		'\x2', '\x2', '\x14', '\xB2', '\x3', '\x2', '\x2', '\x2', '\x16', '\xBF', 
		'\x3', '\x2', '\x2', '\x2', '\x18', '\xCC', '\x3', '\x2', '\x2', '\x2', 
		'\x1A', '\xD9', '\x3', '\x2', '\x2', '\x2', '\x1C', '\xE6', '\x3', '\x2', 
		'\x2', '\x2', '\x1E', '\xF3', '\x3', '\x2', '\x2', '\x2', ' ', '\xFC', 
		'\x3', '\x2', '\x2', '\x2', '\"', '\x105', '\x3', '\x2', '\x2', '\x2', 
		'$', '\x10C', '\x3', '\x2', '\x2', '\x2', '&', '\x11B', '\x3', '\x2', 
		'\x2', '\x2', '(', '\x11D', '\x3', '\x2', '\x2', '\x2', '*', '\x120', 
		'\x3', '\x2', '\x2', '\x2', ',', '\x12D', '\x3', '\x2', '\x2', '\x2', 
		'.', '\x12F', '\x3', '\x2', '\x2', '\x2', '\x30', '\x31', '\x5', '\x4', 
		'\x3', '\x2', '\x31', '\x32', '\a', '\x2', '\x2', '\x3', '\x32', '\x3', 
		'\x3', '\x2', '\x2', '\x2', '\x33', '\x34', '\x5', '\x6', '\x4', '\x2', 
		'\x34', '\x35', '\a', '#', '\x2', '\x2', '\x35', '\x36', '\x5', '\x4', 
		'\x3', '\x2', '\x36', '<', '\x3', '\x2', '\x2', '\x2', '\x37', '\x38', 
		'\x5', '\b', '\x5', '\x2', '\x38', '\x39', '\a', '#', '\x2', '\x2', '\x39', 
		':', '\x5', '\x4', '\x3', '\x2', ':', '<', '\x3', '\x2', '\x2', '\x2', 
		';', '\x33', '\x3', '\x2', '\x2', '\x2', ';', '\x37', '\x3', '\x2', '\x2', 
		'\x2', ';', '<', '\x3', '\x2', '\x2', '\x2', '<', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '=', '>', '\x5', '.', '\x18', '\x2', '>', '\x41', '\a', 
		'\'', '\x2', '\x2', '?', '@', '\a', '\x10', '\x2', '\x2', '@', '\x42', 
		'\x5', '\n', '\x6', '\x2', '\x41', '?', '\x3', '\x2', '\x2', '\x2', '\x41', 
		'\x42', '\x3', '\x2', '\x2', '\x2', '\x42', '\\', '\x3', '\x2', '\x2', 
		'\x2', '\x43', '\x46', '\x5', '.', '\x18', '\x2', '\x44', '\x46', '\a', 
		'\a', '\x2', '\x2', '\x45', '\x43', '\x3', '\x2', '\x2', '\x2', '\x45', 
		'\x44', '\x3', '\x2', '\x2', '\x2', '\x46', 'G', '\x3', '\x2', '\x2', 
		'\x2', 'G', 'H', '\a', '\'', '\x2', '\x2', 'H', 'T', '\a', '\x17', '\x2', 
		'\x2', 'I', 'J', '\x5', '.', '\x18', '\x2', 'J', 'Q', '\a', '\'', '\x2', 
		'\x2', 'K', 'L', '\a', '\x16', '\x2', '\x2', 'L', 'M', '\x5', '.', '\x18', 
		'\x2', 'M', 'N', '\a', '\'', '\x2', '\x2', 'N', 'P', '\x3', '\x2', '\x2', 
		'\x2', 'O', 'K', '\x3', '\x2', '\x2', '\x2', 'P', 'S', '\x3', '\x2', '\x2', 
		'\x2', 'Q', 'O', '\x3', '\x2', '\x2', '\x2', 'Q', 'R', '\x3', '\x2', '\x2', 
		'\x2', 'R', 'U', '\x3', '\x2', '\x2', '\x2', 'S', 'Q', '\x3', '\x2', '\x2', 
		'\x2', 'T', 'I', '\x3', '\x2', '\x2', '\x2', 'T', 'U', '\x3', '\x2', '\x2', 
		'\x2', 'U', 'V', '\x3', '\x2', '\x2', '\x2', 'V', 'W', '\a', '\x18', '\x2', 
		'\x2', 'W', 'X', '\a', '\x19', '\x2', '\x2', 'X', 'Y', '\x5', '\x4', '\x3', 
		'\x2', 'Y', 'Z', '\a', '\x1A', '\x2', '\x2', 'Z', '\\', '\x3', '\x2', 
		'\x2', '\x2', '[', '=', '\x3', '\x2', '\x2', '\x2', '[', '\x45', '\x3', 
		'\x2', '\x2', '\x2', '\\', '\a', '\x3', '\x2', '\x2', '\x2', ']', '^', 
		'\a', '\'', '\x2', '\x2', '^', '_', '\a', '\x10', '\x2', '\x2', '_', 'n', 
		'\x5', '\n', '\x6', '\x2', '`', '\x61', '\a', '\t', '\x2', '\x2', '\x61', 
		'\x62', '\a', '\x17', '\x2', '\x2', '\x62', '\x63', '\x5', '\n', '\x6', 
		'\x2', '\x63', '\x64', '\a', '\x18', '\x2', '\x2', '\x64', '\x65', '\a', 
		'\x19', '\x2', '\x2', '\x65', '\x66', '\x5', '\x4', '\x3', '\x2', '\x66', 
		'g', '\a', '\x1A', '\x2', '\x2', 'g', 'n', '\x3', '\x2', '\x2', '\x2', 
		'h', 'i', '\a', '\'', '\x2', '\x2', 'i', 'n', '\a', '\xF', '\x2', '\x2', 
		'j', 'k', '\a', '\xE', '\x2', '\x2', 'k', 'n', '\x5', '\n', '\x6', '\x2', 
		'l', 'n', '\x5', '\n', '\x6', '\x2', 'm', ']', '\x3', '\x2', '\x2', '\x2', 
		'm', '`', '\x3', '\x2', '\x2', '\x2', 'm', 'h', '\x3', '\x2', '\x2', '\x2', 
		'm', 'j', '\x3', '\x2', '\x2', '\x2', 'm', 'l', '\x3', '\x2', '\x2', '\x2', 
		'n', '\t', '\x3', '\x2', '\x2', '\x2', 'o', 'p', '\x5', '\f', '\a', '\x2', 
		'p', '\v', '\x3', '\x2', '\x2', '\x2', 'q', 'r', '\b', '\a', '\x1', '\x2', 
		'r', 's', '\x5', '\xE', '\b', '\x2', 's', 'y', '\x3', '\x2', '\x2', '\x2', 
		't', 'u', '\f', '\x4', '\x2', '\x2', 'u', 'v', '\a', '\x6', '\x2', '\x2', 
		'v', 'x', '\x5', '\xE', '\b', '\x2', 'w', 't', '\x3', '\x2', '\x2', '\x2', 
		'x', '{', '\x3', '\x2', '\x2', '\x2', 'y', 'w', '\x3', '\x2', '\x2', '\x2', 
		'y', 'z', '\x3', '\x2', '\x2', '\x2', 'z', '\r', '\x3', '\x2', '\x2', 
		'\x2', '{', 'y', '\x3', '\x2', '\x2', '\x2', '|', '}', '\b', '\b', '\x1', 
		'\x2', '}', '\x80', '\x5', '\x10', '\t', '\x2', '~', '\x80', '\x5', '\x12', 
		'\n', '\x2', '\x7F', '|', '\x3', '\x2', '\x2', '\x2', '\x7F', '~', '\x3', 
		'\x2', '\x2', '\x2', '\x80', '\x86', '\x3', '\x2', '\x2', '\x2', '\x81', 
		'\x82', '\f', '\x5', '\x2', '\x2', '\x82', '\x83', '\a', '\x5', '\x2', 
		'\x2', '\x83', '\x85', '\x5', '\x10', '\t', '\x2', '\x84', '\x81', '\x3', 
		'\x2', '\x2', '\x2', '\x85', '\x88', '\x3', '\x2', '\x2', '\x2', '\x86', 
		'\x84', '\x3', '\x2', '\x2', '\x2', '\x86', '\x87', '\x3', '\x2', '\x2', 
		'\x2', '\x87', '\xF', '\x3', '\x2', '\x2', '\x2', '\x88', '\x86', '\x3', 
		'\x2', '\x2', '\x2', '\x89', '\x8C', '\x5', '\x1C', '\xF', '\x2', '\x8A', 
		'\x8C', '\x5', '\x1E', '\x10', '\x2', '\x8B', '\x89', '\x3', '\x2', '\x2', 
		'\x2', '\x8B', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8D', '\x3', 
		'\x2', '\x2', '\x2', '\x8D', '\x90', '\a', '\x1D', '\x2', '\x2', '\x8E', 
		'\x91', '\x5', '\x1C', '\xF', '\x2', '\x8F', '\x91', '\x5', '\x1E', '\x10', 
		'\x2', '\x90', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x90', '\x8F', '\x3', 
		'\x2', '\x2', '\x2', '\x91', '\x97', '\x3', '\x2', '\x2', '\x2', '\x92', 
		'\x97', '\x5', '\x14', '\v', '\x2', '\x93', '\x97', '\x5', '\x16', '\f', 
		'\x2', '\x94', '\x97', '\x5', '\x18', '\r', '\x2', '\x95', '\x97', '\x5', 
		'\x1A', '\xE', '\x2', '\x96', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x96', 
		'\x92', '\x3', '\x2', '\x2', '\x2', '\x96', '\x93', '\x3', '\x2', '\x2', 
		'\x2', '\x96', '\x94', '\x3', '\x2', '\x2', '\x2', '\x96', '\x95', '\x3', 
		'\x2', '\x2', '\x2', '\x97', '\x11', '\x3', '\x2', '\x2', '\x2', '\x98', 
		'\x9B', '\x5', '\x1C', '\xF', '\x2', '\x99', '\x9B', '\x5', '\x1E', '\x10', 
		'\x2', '\x9A', '\x98', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x99', '\x3', 
		'\x2', '\x2', '\x2', '\x9B', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x9C', 
		'\x9F', '\a', '\x1E', '\x2', '\x2', '\x9D', '\xA0', '\x5', '\x1C', '\xF', 
		'\x2', '\x9E', '\xA0', '\x5', '\x1E', '\x10', '\x2', '\x9F', '\x9D', '\x3', 
		'\x2', '\x2', '\x2', '\x9F', '\x9E', '\x3', '\x2', '\x2', '\x2', '\xA0', 
		'\xA6', '\x3', '\x2', '\x2', '\x2', '\xA1', '\xA6', '\x5', '\x14', '\v', 
		'\x2', '\xA2', '\xA6', '\x5', '\x16', '\f', '\x2', '\xA3', '\xA6', '\x5', 
		'\x18', '\r', '\x2', '\xA4', '\xA6', '\x5', '\x1A', '\xE', '\x2', '\xA5', 
		'\x9A', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA1', '\x3', '\x2', '\x2', 
		'\x2', '\xA5', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA3', '\x3', 
		'\x2', '\x2', '\x2', '\xA5', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xA6', 
		'\x13', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xAA', '\x5', '\x1C', '\xF', 
		'\x2', '\xA8', '\xAA', '\x5', '\x1E', '\x10', '\x2', '\xA9', '\xA7', '\x3', 
		'\x2', '\x2', '\x2', '\xA9', '\xA8', '\x3', '\x2', '\x2', '\x2', '\xAA', 
		'\xAB', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xAE', '\a', '\x1F', '\x2', 
		'\x2', '\xAC', '\xAF', '\x5', '\x1C', '\xF', '\x2', '\xAD', '\xAF', '\x5', 
		'\x1E', '\x10', '\x2', '\xAE', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xAE', 
		'\xAD', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xB3', '\x3', '\x2', '\x2', 
		'\x2', '\xB0', '\xB3', '\x5', '\x1C', '\xF', '\x2', '\xB1', '\xB3', '\x5', 
		'\x1E', '\x10', '\x2', '\xB2', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xB2', 
		'\xB0', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xB1', '\x3', '\x2', '\x2', 
		'\x2', '\xB3', '\x15', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xB7', '\x5', 
		'\x1C', '\xF', '\x2', '\xB5', '\xB7', '\x5', '\x1E', '\x10', '\x2', '\xB6', 
		'\xB4', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB5', '\x3', '\x2', '\x2', 
		'\x2', '\xB7', '\xB8', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xBB', '\a', 
		' ', '\x2', '\x2', '\xB9', '\xBC', '\x5', '\x1C', '\xF', '\x2', '\xBA', 
		'\xBC', '\x5', '\x1E', '\x10', '\x2', '\xBB', '\xB9', '\x3', '\x2', '\x2', 
		'\x2', '\xBB', '\xBA', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xC0', '\x3', 
		'\x2', '\x2', '\x2', '\xBD', '\xC0', '\x5', '\x1C', '\xF', '\x2', '\xBE', 
		'\xC0', '\x5', '\x1E', '\x10', '\x2', '\xBF', '\xB6', '\x3', '\x2', '\x2', 
		'\x2', '\xBF', '\xBD', '\x3', '\x2', '\x2', '\x2', '\xBF', '\xBE', '\x3', 
		'\x2', '\x2', '\x2', '\xC0', '\x17', '\x3', '\x2', '\x2', '\x2', '\xC1', 
		'\xC4', '\x5', '\x1C', '\xF', '\x2', '\xC2', '\xC4', '\x5', '\x1E', '\x10', 
		'\x2', '\xC3', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xC3', '\xC2', '\x3', 
		'\x2', '\x2', '\x2', '\xC4', '\xC5', '\x3', '\x2', '\x2', '\x2', '\xC5', 
		'\xC8', '\a', '\"', '\x2', '\x2', '\xC6', '\xC9', '\x5', '\x1C', '\xF', 
		'\x2', '\xC7', '\xC9', '\x5', '\x1E', '\x10', '\x2', '\xC8', '\xC6', '\x3', 
		'\x2', '\x2', '\x2', '\xC8', '\xC7', '\x3', '\x2', '\x2', '\x2', '\xC9', 
		'\xCD', '\x3', '\x2', '\x2', '\x2', '\xCA', '\xCD', '\x5', '\x1C', '\xF', 
		'\x2', '\xCB', '\xCD', '\x5', '\x1E', '\x10', '\x2', '\xCC', '\xC3', '\x3', 
		'\x2', '\x2', '\x2', '\xCC', '\xCA', '\x3', '\x2', '\x2', '\x2', '\xCC', 
		'\xCB', '\x3', '\x2', '\x2', '\x2', '\xCD', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\xCE', '\xD1', '\x5', '\x1C', '\xF', '\x2', '\xCF', '\xD1', '\x5', 
		'\x1E', '\x10', '\x2', '\xD0', '\xCE', '\x3', '\x2', '\x2', '\x2', '\xD0', 
		'\xCF', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xD2', '\x3', '\x2', '\x2', 
		'\x2', '\xD2', '\xD5', '\a', '\"', '\x2', '\x2', '\xD3', '\xD6', '\x5', 
		'\x1C', '\xF', '\x2', '\xD4', '\xD6', '\x5', '\x1E', '\x10', '\x2', '\xD5', 
		'\xD3', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xD4', '\x3', '\x2', '\x2', 
		'\x2', '\xD6', '\xDA', '\x3', '\x2', '\x2', '\x2', '\xD7', '\xDA', '\x5', 
		'\x1C', '\xF', '\x2', '\xD8', '\xDA', '\x5', '\x1E', '\x10', '\x2', '\xD9', 
		'\xD0', '\x3', '\x2', '\x2', '\x2', '\xD9', '\xD7', '\x3', '\x2', '\x2', 
		'\x2', '\xD9', '\xD8', '\x3', '\x2', '\x2', '\x2', '\xDA', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', '\xDB', '\xDE', '\x5', ' ', '\x11', '\x2', '\xDC', 
		'\xDE', '\x5', '\"', '\x12', '\x2', '\xDD', '\xDB', '\x3', '\x2', '\x2', 
		'\x2', '\xDD', '\xDC', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xDF', '\x3', 
		'\x2', '\x2', '\x2', '\xDF', '\xE2', '\a', '\x14', '\x2', '\x2', '\xE0', 
		'\xE3', '\x5', '\x1C', '\xF', '\x2', '\xE1', '\xE3', '\x5', '\x1E', '\x10', 
		'\x2', '\xE2', '\xE0', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xE1', '\x3', 
		'\x2', '\x2', '\x2', '\xE3', '\xE7', '\x3', '\x2', '\x2', '\x2', '\xE4', 
		'\xE7', '\x5', ' ', '\x11', '\x2', '\xE5', '\xE7', '\x5', '\"', '\x12', 
		'\x2', '\xE6', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xE6', '\xE4', '\x3', 
		'\x2', '\x2', '\x2', '\xE6', '\xE5', '\x3', '\x2', '\x2', '\x2', '\xE7', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xEB', '\x5', ' ', '\x11', 
		'\x2', '\xE9', '\xEB', '\x5', '\"', '\x12', '\x2', '\xEA', '\xE8', '\x3', 
		'\x2', '\x2', '\x2', '\xEA', '\xE9', '\x3', '\x2', '\x2', '\x2', '\xEB', 
		'\xEC', '\x3', '\x2', '\x2', '\x2', '\xEC', '\xEF', '\a', '\x15', '\x2', 
		'\x2', '\xED', '\xF0', '\x5', '\x1C', '\xF', '\x2', '\xEE', '\xF0', '\x5', 
		'\x1E', '\x10', '\x2', '\xEF', '\xED', '\x3', '\x2', '\x2', '\x2', '\xEF', 
		'\xEE', '\x3', '\x2', '\x2', '\x2', '\xF0', '\xF4', '\x3', '\x2', '\x2', 
		'\x2', '\xF1', '\xF4', '\x5', ' ', '\x11', '\x2', '\xF2', '\xF4', '\x5', 
		'\"', '\x12', '\x2', '\xF3', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xF3', 
		'\xF1', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xF2', '\x3', '\x2', '\x2', 
		'\x2', '\xF4', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xF5', '\xF6', '\x5', 
		'$', '\x13', '\x2', '\xF6', '\xF9', '\a', '\x12', '\x2', '\x2', '\xF7', 
		'\xFA', '\x5', ' ', '\x11', '\x2', '\xF8', '\xFA', '\x5', '\"', '\x12', 
		'\x2', '\xF9', '\xF7', '\x3', '\x2', '\x2', '\x2', '\xF9', '\xF8', '\x3', 
		'\x2', '\x2', '\x2', '\xFA', '\xFD', '\x3', '\x2', '\x2', '\x2', '\xFB', 
		'\xFD', '\x5', '$', '\x13', '\x2', '\xFC', '\xF5', '\x3', '\x2', '\x2', 
		'\x2', '\xFC', '\xFB', '\x3', '\x2', '\x2', '\x2', '\xFD', '!', '\x3', 
		'\x2', '\x2', '\x2', '\xFE', '\xFF', '\x5', '$', '\x13', '\x2', '\xFF', 
		'\x102', '\a', '\x13', '\x2', '\x2', '\x100', '\x103', '\x5', ' ', '\x11', 
		'\x2', '\x101', '\x103', '\x5', '\"', '\x12', '\x2', '\x102', '\x100', 
		'\x3', '\x2', '\x2', '\x2', '\x102', '\x101', '\x3', '\x2', '\x2', '\x2', 
		'\x103', '\x106', '\x3', '\x2', '\x2', '\x2', '\x104', '\x106', '\x5', 
		'$', '\x13', '\x2', '\x105', '\xFE', '\x3', '\x2', '\x2', '\x2', '\x105', 
		'\x104', '\x3', '\x2', '\x2', '\x2', '\x106', '#', '\x3', '\x2', '\x2', 
		'\x2', '\x107', '\x108', '\x5', '&', '\x14', '\x2', '\x108', '\x109', 
		'\a', '\x11', '\x2', '\x2', '\x109', '\x10A', '\x5', '$', '\x13', '\x2', 
		'\x10A', '\x10D', '\x3', '\x2', '\x2', '\x2', '\x10B', '\x10D', '\x5', 
		'&', '\x14', '\x2', '\x10C', '\x107', '\x3', '\x2', '\x2', '\x2', '\x10C', 
		'\x10B', '\x3', '\x2', '\x2', '\x2', '\x10D', '%', '\x3', '\x2', '\x2', 
		'\x2', '\x10E', '\x11C', '\a', '\'', '\x2', '\x2', '\x10F', '\x110', '\a', 
		'\'', '\x2', '\x2', '\x110', '\x111', '\a', '\b', '\x2', '\x2', '\x111', 
		'\x11C', '\a', '\x3', '\x2', '\x2', '\x112', '\x11C', '\a', '%', '\x2', 
		'\x2', '\x113', '\x11C', '\a', '&', '\x2', '\x2', '\x114', '\x11C', '\a', 
		'\r', '\x2', '\x2', '\x115', '\x11C', '\x5', '(', '\x15', '\x2', '\x116', 
		'\x117', '\a', '\x17', '\x2', '\x2', '\x117', '\x118', '\x5', '\n', '\x6', 
		'\x2', '\x118', '\x119', '\a', '\x18', '\x2', '\x2', '\x119', '\x11C', 
		'\x3', '\x2', '\x2', '\x2', '\x11A', '\x11C', '\x5', '*', '\x16', '\x2', 
		'\x11B', '\x10E', '\x3', '\x2', '\x2', '\x2', '\x11B', '\x10F', '\x3', 
		'\x2', '\x2', '\x2', '\x11B', '\x112', '\x3', '\x2', '\x2', '\x2', '\x11B', 
		'\x113', '\x3', '\x2', '\x2', '\x2', '\x11B', '\x114', '\x3', '\x2', '\x2', 
		'\x2', '\x11B', '\x115', '\x3', '\x2', '\x2', '\x2', '\x11B', '\x116', 
		'\x3', '\x2', '\x2', '\x2', '\x11B', '\x11A', '\x3', '\x2', '\x2', '\x2', 
		'\x11C', '\'', '\x3', '\x2', '\x2', '\x2', '\x11D', '\x11E', '\a', '\x4', 
		'\x2', '\x2', '\x11E', '\x11F', '\a', '\'', '\x2', '\x2', '\x11F', ')', 
		'\x3', '\x2', '\x2', '\x2', '\x120', '\x121', '\a', '\'', '\x2', '\x2', 
		'\x121', '\x122', '\a', '\x17', '\x2', '\x2', '\x122', '\x123', '\x5', 
		',', '\x17', '\x2', '\x123', '\x124', '\a', '\x18', '\x2', '\x2', '\x124', 
		'+', '\x3', '\x2', '\x2', '\x2', '\x125', '\x12A', '\x5', '\n', '\x6', 
		'\x2', '\x126', '\x127', '\a', '\x16', '\x2', '\x2', '\x127', '\x129', 
		'\x5', '\n', '\x6', '\x2', '\x128', '\x126', '\x3', '\x2', '\x2', '\x2', 
		'\x129', '\x12C', '\x3', '\x2', '\x2', '\x2', '\x12A', '\x128', '\x3', 
		'\x2', '\x2', '\x2', '\x12A', '\x12B', '\x3', '\x2', '\x2', '\x2', '\x12B', 
		'\x12E', '\x3', '\x2', '\x2', '\x2', '\x12C', '\x12A', '\x3', '\x2', '\x2', 
		'\x2', '\x12D', '\x125', '\x3', '\x2', '\x2', '\x2', '\x12D', '\x12E', 
		'\x3', '\x2', '\x2', '\x2', '\x12E', '-', '\x3', '\x2', '\x2', '\x2', 
		'\x12F', '\x130', '\t', '\x2', '\x2', '\x2', '\x130', '/', '\x3', '\x2', 
		'\x2', '\x2', ',', ';', '\x41', '\x45', 'Q', 'T', '[', 'm', 'y', '\x7F', 
		'\x86', '\x8B', '\x90', '\x96', '\x9A', '\x9F', '\xA5', '\xA9', '\xAE', 
		'\xB2', '\xB6', '\xBB', '\xBF', '\xC3', '\xC8', '\xCC', '\xD0', '\xD5', 
		'\xD9', '\xDD', '\xE2', '\xE6', '\xEA', '\xEF', '\xF3', '\xF9', '\xFC', 
		'\x102', '\x105', '\x10C', '\x11B', '\x12A', '\x12D',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Compiler
