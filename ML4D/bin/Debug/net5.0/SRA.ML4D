tensor a[1][1] = { [-1.0] };
tensor b[1][1] = { [2.0] };

bool c = true;
bool d = not c;

int x0 = 0;
int x1 = 1;
int x2 = 2;
int x3 = 3;
int x4 = 4;

int z0 = 0;
int z1 = 1;
int y2 = 2;
int y3 = 3;
int y4 = 4;

double step_size = 0.1;
    
int i = 0;
while (i < 100) {
  tensor y_hat0[1][1] = ((a * x0 + b) - z0)**2;
  tensor y_hat1[1][1] = ((a * x1 + b) - z1)**2;
  tensor y_hat2[1][1] = ((a * x2 + b) - y2)**2;
  tensor y_hat3[1][1] = ((a * x3 + b) - y3)**2;
  tensor y_hat4[1][1] = ((a * x4 + b) - y4)**2;

  tensor loss[1][1] = (y_hat0 + y_hat1 + y_hat2 + y_hat3 + y_hat4)/5;

  gradients(loss, (aGrads << a, bGrads << b), {
    a = a - (aGrads * step_size);
    b = b - (bGrads * step_size);

    //frees the entire computation graph of loss
  });
  
  for (int j = 0; j < 100; j = j + 1) {
    if (i < 20 or i < 20 + 10) {
      double ab = 2.2;
    } else if (i > 30) {
      double ba = 4.4;
    } else if (i == 80 or i == 90) {
      double cd = 5.5;
    } else {
      double dc = 7.7;
    }
  }

  i = i + 1;
}