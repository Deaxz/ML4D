//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/Janus/source/repos/p4/Grammar\Grammar.g4 by ANTLR 4.9.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Compiler {

using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IGrammarListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.1")]
[System.Diagnostics.DebuggerNonUserCode]
[System.CLSCompliant(false)]
public partial class GrammarBaseListener : IGrammarListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.prog"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterProg([NotNull] GrammarParser.ProgContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.prog"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitProg([NotNull] GrammarParser.ProgContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.lines"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLines([NotNull] GrammarParser.LinesContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.lines"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLines([NotNull] GrammarParser.LinesContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.dcl"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDcl([NotNull] GrammarParser.DclContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.dcl"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDcl([NotNull] GrammarParser.DclContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStmt([NotNull] GrammarParser.StmtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStmt([NotNull] GrammarParser.StmtContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.expr_stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpr_stmt([NotNull] GrammarParser.Expr_stmtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.expr_stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpr_stmt([NotNull] GrammarParser.Expr_stmtContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.logical_OR_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLogical_OR_expr([NotNull] GrammarParser.Logical_OR_exprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.logical_OR_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLogical_OR_expr([NotNull] GrammarParser.Logical_OR_exprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.logical_AND_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLogical_AND_expr([NotNull] GrammarParser.Logical_AND_exprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.logical_AND_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLogical_AND_expr([NotNull] GrammarParser.Logical_AND_exprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.equals_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterEquals_expr([NotNull] GrammarParser.Equals_exprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.equals_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitEquals_expr([NotNull] GrammarParser.Equals_exprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.notequals_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNotequals_expr([NotNull] GrammarParser.Notequals_exprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.notequals_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNotequals_expr([NotNull] GrammarParser.Notequals_exprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.relational_gthan_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRelational_gthan_expr([NotNull] GrammarParser.Relational_gthan_exprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.relational_gthan_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRelational_gthan_expr([NotNull] GrammarParser.Relational_gthan_exprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.relational_lthan_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRelational_lthan_expr([NotNull] GrammarParser.Relational_lthan_exprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.relational_lthan_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRelational_lthan_expr([NotNull] GrammarParser.Relational_lthan_exprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.relational_gethan_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRelational_gethan_expr([NotNull] GrammarParser.Relational_gethan_exprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.relational_gethan_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRelational_gethan_expr([NotNull] GrammarParser.Relational_gethan_exprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.relational_lethan_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRelational_lethan_expr([NotNull] GrammarParser.Relational_lethan_exprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.relational_lethan_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRelational_lethan_expr([NotNull] GrammarParser.Relational_lethan_exprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.addition_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAddition_expr([NotNull] GrammarParser.Addition_exprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.addition_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAddition_expr([NotNull] GrammarParser.Addition_exprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.subtraction_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSubtraction_expr([NotNull] GrammarParser.Subtraction_exprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.subtraction_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSubtraction_expr([NotNull] GrammarParser.Subtraction_exprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.multiplication_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMultiplication_expr([NotNull] GrammarParser.Multiplication_exprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.multiplication_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMultiplication_expr([NotNull] GrammarParser.Multiplication_exprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.division_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDivision_expr([NotNull] GrammarParser.Division_exprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.division_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDivision_expr([NotNull] GrammarParser.Division_exprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.power_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPower_expr([NotNull] GrammarParser.Power_exprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.power_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPower_expr([NotNull] GrammarParser.Power_exprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.factor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFactor([NotNull] GrammarParser.FactorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.factor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFactor([NotNull] GrammarParser.FactorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.not_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNot_expr([NotNull] GrammarParser.Not_exprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.not_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNot_expr([NotNull] GrammarParser.Not_exprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.method_invocation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMethod_invocation([NotNull] GrammarParser.Method_invocationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.method_invocation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMethod_invocation([NotNull] GrammarParser.Method_invocationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.argument_list"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArgument_list([NotNull] GrammarParser.Argument_listContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.argument_list"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArgument_list([NotNull] GrammarParser.Argument_listContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterType([NotNull] GrammarParser.TypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitType([NotNull] GrammarParser.TypeContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
} // namespace Compiler
