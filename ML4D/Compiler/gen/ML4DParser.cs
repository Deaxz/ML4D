//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/Dion/source/repos/p4/ML4D/Grammar\ML4D.g4 by ANTLR 4.9.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.1")]
[System.CLSCompliant(false)]
public partial class ML4DParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, VOID=2, DOUBLE=3, INT=4, BOOL=5, TENSOR=6, NOT=7, POW=8, MUL=9, 
		DIV=10, PLUS=11, MINUS=12, EQUALS=13, NOTEQUALS=14, GTHAN=15, LTHAN=16, 
		GETHAN=17, LETHAN=18, AND=19, OR=20, ASSIGN=21, LPAREN=22, RPAREN=23, 
		LBRACE=24, RBRACE=25, LBRACK=26, RBRACK=27, COMMA=28, SEMICOLON=29, IF=30, 
		ELSE=31, WHILE=32, FOR=33, RETURN=34, GRADIENTS=35, WS=36, BOOLVAL=37, 
		INUM=38, FNUM=39, ID=40, BLOCKCOMMENT=41, LINECOMMENT=42;
	public const int
		RULE_lines = 0, RULE_dcl = 1, RULE_tensor_init = 2, RULE_stmt = 3, RULE_assign_expr = 4, 
		RULE_bool_expr = 5, RULE_expr = 6, RULE_types = 7;
	public static readonly string[] ruleNames = {
		"lines", "dcl", "tensor_init", "stmt", "assign_expr", "bool_expr", "expr", 
		"types"
	};

	private static readonly string[] _LiteralNames = {
		null, "'<<'", "'void'", "'double'", "'int'", "'bool'", "'tensor'", "'not'", 
		"'**'", "'*'", "'/'", "'+'", "'-'", "'=='", "'!='", "'>'", "'<'", "'>='", 
		"'<='", "'and'", "'or'", "'='", "'('", "')'", "'{'", "'}'", "'['", "']'", 
		"','", "';'", "'if'", "'else'", "'while'", "'for'", "'return'", "'gradients'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "VOID", "DOUBLE", "INT", "BOOL", "TENSOR", "NOT", "POW", "MUL", 
		"DIV", "PLUS", "MINUS", "EQUALS", "NOTEQUALS", "GTHAN", "LTHAN", "GETHAN", 
		"LETHAN", "AND", "OR", "ASSIGN", "LPAREN", "RPAREN", "LBRACE", "RBRACE", 
		"LBRACK", "RBRACK", "COMMA", "SEMICOLON", "IF", "ELSE", "WHILE", "FOR", 
		"RETURN", "GRADIENTS", "WS", "BOOLVAL", "INUM", "FNUM", "ID", "BLOCKCOMMENT", 
		"LINECOMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ML4D.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ML4DParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ML4DParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ML4DParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class LinesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DclContext[] dcl() {
			return GetRuleContexts<DclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DclContext dcl(int i) {
			return GetRuleContext<DclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(ML4DParser.Eof, 0); }
		public LinesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lines; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IML4DListener typedListener = listener as IML4DListener;
			if (typedListener != null) typedListener.EnterLines(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IML4DListener typedListener = listener as IML4DListener;
			if (typedListener != null) typedListener.ExitLines(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IML4DVisitor<TResult> typedVisitor = visitor as IML4DVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLines(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LinesContext lines() {
		LinesContext _localctx = new LinesContext(Context, State);
		EnterRule(_localctx, 0, RULE_lines);
		int _la;
		try {
			State = 23;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VOID:
			case DOUBLE:
			case INT:
			case BOOL:
			case TENSOR:
			case IF:
			case WHILE:
			case FOR:
			case RETURN:
			case GRADIENTS:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 18;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					State = 18;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case VOID:
					case DOUBLE:
					case INT:
					case BOOL:
					case TENSOR:
						{
						State = 16;
						dcl();
						}
						break;
					case IF:
					case WHILE:
					case FOR:
					case RETURN:
					case GRADIENTS:
					case ID:
						{
						State = 17;
						stmt();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 20;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << VOID) | (1L << DOUBLE) | (1L << INT) | (1L << BOOL) | (1L << TENSOR) | (1L << IF) | (1L << WHILE) | (1L << FOR) | (1L << RETURN) | (1L << GRADIENTS) | (1L << ID))) != 0) );
				}
				break;
			case Eof:
				EnterOuterAlt(_localctx, 2);
				{
				State = 22;
				Match(Eof);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DclContext : ParserRuleContext {
		public DclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dcl; } }
	 
		public DclContext() { }
		public virtual void CopyFrom(DclContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TensorDeclContext : DclContext {
		public IToken type;
		public IToken id;
		public IToken rows;
		public IToken coloumns;
		public Tensor_initContext init;
		public Bool_exprContext assignInit;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LBRACK() { return GetTokens(ML4DParser.LBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK(int i) {
			return GetToken(ML4DParser.LBRACK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RBRACK() { return GetTokens(ML4DParser.RBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK(int i) {
			return GetToken(ML4DParser.RBRACK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(ML4DParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(ML4DParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TENSOR() { return GetToken(ML4DParser.TENSOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(ML4DParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INUM() { return GetTokens(ML4DParser.INUM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INUM(int i) {
			return GetToken(ML4DParser.INUM, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Tensor_initContext tensor_init() {
			return GetRuleContext<Tensor_initContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bool_exprContext bool_expr() {
			return GetRuleContext<Bool_exprContext>(0);
		}
		public TensorDeclContext(DclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IML4DListener typedListener = listener as IML4DListener;
			if (typedListener != null) typedListener.EnterTensorDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IML4DListener typedListener = listener as IML4DListener;
			if (typedListener != null) typedListener.ExitTensorDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IML4DVisitor<TResult> typedVisitor = visitor as IML4DVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTensorDecl(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncDeclContext : DclContext {
		public TypesContext type;
		public IToken id;
		public TypesContext _types;
		public IList<TypesContext> _argtype = new List<TypesContext>();
		public IToken _ID;
		public IList<IToken> _argid = new List<IToken>();
		public LinesContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ML4DParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ML4DParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(ML4DParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(ML4DParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypesContext[] types() {
			return GetRuleContexts<TypesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypesContext types(int i) {
			return GetRuleContext<TypesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(ML4DParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(ML4DParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LinesContext lines() {
			return GetRuleContext<LinesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ML4DParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ML4DParser.COMMA, i);
		}
		public FuncDeclContext(DclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IML4DListener typedListener = listener as IML4DListener;
			if (typedListener != null) typedListener.EnterFuncDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IML4DListener typedListener = listener as IML4DListener;
			if (typedListener != null) typedListener.ExitFuncDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IML4DVisitor<TResult> typedVisitor = visitor as IML4DVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncDecl(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VarDeclContext : DclContext {
		public TypesContext type;
		public IToken id;
		public Bool_exprContext init;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(ML4DParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(ML4DParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypesContext types() {
			return GetRuleContext<TypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(ML4DParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Bool_exprContext bool_expr() {
			return GetRuleContext<Bool_exprContext>(0);
		}
		public VarDeclContext(DclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IML4DListener typedListener = listener as IML4DListener;
			if (typedListener != null) typedListener.EnterVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IML4DListener typedListener = listener as IML4DListener;
			if (typedListener != null) typedListener.ExitVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IML4DVisitor<TResult> typedVisitor = visitor as IML4DVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DclContext dcl() {
		DclContext _localctx = new DclContext(Context, State);
		EnterRule(_localctx, 2, RULE_dcl);
		int _la;
		try {
			State = 67;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				_localctx = new VarDeclContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 25;
				((VarDeclContext)_localctx).type = types();
				State = 26;
				((VarDeclContext)_localctx).id = Match(ID);
				State = 27;
				Match(ASSIGN);
				State = 28;
				((VarDeclContext)_localctx).init = bool_expr(0);
				State = 29;
				Match(SEMICOLON);
				}
				break;
			case 2:
				_localctx = new TensorDeclContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 31;
				((TensorDeclContext)_localctx).type = Match(TENSOR);
				State = 32;
				((TensorDeclContext)_localctx).id = Match(ID);
				State = 33;
				Match(LBRACK);
				State = 34;
				((TensorDeclContext)_localctx).rows = Match(INUM);
				State = 35;
				Match(RBRACK);
				State = 36;
				Match(LBRACK);
				State = 37;
				((TensorDeclContext)_localctx).coloumns = Match(INUM);
				State = 38;
				Match(RBRACK);
				State = 39;
				Match(ASSIGN);
				State = 42;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LBRACE:
					{
					State = 40;
					((TensorDeclContext)_localctx).init = tensor_init();
					}
					break;
				case NOT:
				case MINUS:
				case LPAREN:
				case BOOLVAL:
				case INUM:
				case FNUM:
				case ID:
					{
					State = 41;
					((TensorDeclContext)_localctx).assignInit = bool_expr(0);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 44;
				Match(SEMICOLON);
				}
				break;
			case 3:
				_localctx = new FuncDeclContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 46;
				((FuncDeclContext)_localctx).type = types();
				State = 47;
				((FuncDeclContext)_localctx).id = Match(ID);
				State = 48;
				Match(LPAREN);
				State = 60;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << VOID) | (1L << DOUBLE) | (1L << INT) | (1L << BOOL))) != 0)) {
					{
					State = 49;
					((FuncDeclContext)_localctx)._types = types();
					((FuncDeclContext)_localctx)._argtype.Add(((FuncDeclContext)_localctx)._types);
					State = 50;
					((FuncDeclContext)_localctx)._ID = Match(ID);
					((FuncDeclContext)_localctx)._argid.Add(((FuncDeclContext)_localctx)._ID);
					State = 57;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 51;
						Match(COMMA);
						State = 52;
						((FuncDeclContext)_localctx)._types = types();
						((FuncDeclContext)_localctx)._argtype.Add(((FuncDeclContext)_localctx)._types);
						State = 53;
						((FuncDeclContext)_localctx)._ID = Match(ID);
						((FuncDeclContext)_localctx)._argid.Add(((FuncDeclContext)_localctx)._ID);
						}
						}
						State = 59;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 62;
				Match(RPAREN);
				State = 63;
				Match(LBRACE);
				State = 64;
				((FuncDeclContext)_localctx).body = lines();
				State = 65;
				Match(RBRACE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tensor_initContext : ParserRuleContext {
		public ExprContext _expr;
		public IList<ExprContext> _firstRow = new List<ExprContext>();
		public IList<ExprContext> _elements = new List<ExprContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(ML4DParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LBRACK() { return GetTokens(ML4DParser.LBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK(int i) {
			return GetToken(ML4DParser.LBRACK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RBRACK() { return GetTokens(ML4DParser.RBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK(int i) {
			return GetToken(ML4DParser.RBRACK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(ML4DParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ML4DParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ML4DParser.COMMA, i);
		}
		public Tensor_initContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tensor_init; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IML4DListener typedListener = listener as IML4DListener;
			if (typedListener != null) typedListener.EnterTensor_init(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IML4DListener typedListener = listener as IML4DListener;
			if (typedListener != null) typedListener.ExitTensor_init(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IML4DVisitor<TResult> typedVisitor = visitor as IML4DVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTensor_init(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tensor_initContext tensor_init() {
		Tensor_initContext _localctx = new Tensor_initContext(Context, State);
		EnterRule(_localctx, 4, RULE_tensor_init);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69;
			Match(LBRACE);
			State = 70;
			Match(LBRACK);
			State = 71;
			_localctx._expr = expr(0);
			_localctx._firstRow.Add(_localctx._expr);
			State = 76;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 72;
				Match(COMMA);
				State = 73;
				_localctx._expr = expr(0);
				_localctx._firstRow.Add(_localctx._expr);
				}
				}
				State = 78;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 79;
			Match(RBRACK);
			State = 94;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 80;
				Match(COMMA);
				State = 81;
				Match(LBRACK);
				State = 82;
				_localctx._expr = expr(0);
				_localctx._elements.Add(_localctx._expr);
				State = 87;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 83;
					Match(COMMA);
					State = 84;
					_localctx._expr = expr(0);
					_localctx._elements.Add(_localctx._expr);
					}
					}
					State = 89;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 90;
				Match(RBRACK);
				}
				}
				State = 96;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 97;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtContext : ParserRuleContext {
		public StmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt; } }
	 
		public StmtContext() { }
		public virtual void CopyFrom(StmtContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ForStmtContext : StmtContext {
		public DclContext init;
		public Bool_exprContext pred;
		public Assign_exprContext final;
		public LinesContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(ML4DParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ML4DParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(ML4DParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ML4DParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(ML4DParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(ML4DParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DclContext dcl() {
			return GetRuleContext<DclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bool_exprContext bool_expr() {
			return GetRuleContext<Bool_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assign_exprContext assign_expr() {
			return GetRuleContext<Assign_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LinesContext lines() {
			return GetRuleContext<LinesContext>(0);
		}
		public ForStmtContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IML4DListener typedListener = listener as IML4DListener;
			if (typedListener != null) typedListener.EnterForStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IML4DListener typedListener = listener as IML4DListener;
			if (typedListener != null) typedListener.ExitForStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IML4DVisitor<TResult> typedVisitor = visitor as IML4DVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileStmtContext : StmtContext {
		public Bool_exprContext pred;
		public LinesContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(ML4DParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ML4DParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ML4DParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(ML4DParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(ML4DParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Bool_exprContext bool_expr() {
			return GetRuleContext<Bool_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LinesContext lines() {
			return GetRuleContext<LinesContext>(0);
		}
		public WhileStmtContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IML4DListener typedListener = listener as IML4DListener;
			if (typedListener != null) typedListener.EnterWhileStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IML4DListener typedListener = listener as IML4DListener;
			if (typedListener != null) typedListener.ExitWhileStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IML4DVisitor<TResult> typedVisitor = visitor as IML4DVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfStmtContext : StmtContext {
		public Bool_exprContext _bool_expr;
		public IList<Bool_exprContext> _pred = new List<Bool_exprContext>();
		public LinesContext _lines;
		public IList<LinesContext> _body = new List<LinesContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IF() { return GetTokens(ML4DParser.IF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF(int i) {
			return GetToken(ML4DParser.IF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LPAREN() { return GetTokens(ML4DParser.LPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN(int i) {
			return GetToken(ML4DParser.LPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RPAREN() { return GetTokens(ML4DParser.RPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN(int i) {
			return GetToken(ML4DParser.RPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LBRACE() { return GetTokens(ML4DParser.LBRACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE(int i) {
			return GetToken(ML4DParser.LBRACE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RBRACE() { return GetTokens(ML4DParser.RBRACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE(int i) {
			return GetToken(ML4DParser.RBRACE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bool_exprContext[] bool_expr() {
			return GetRuleContexts<Bool_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bool_exprContext bool_expr(int i) {
			return GetRuleContext<Bool_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LinesContext[] lines() {
			return GetRuleContexts<LinesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LinesContext lines(int i) {
			return GetRuleContext<LinesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELSE() { return GetTokens(ML4DParser.ELSE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE(int i) {
			return GetToken(ML4DParser.ELSE, i);
		}
		public IfStmtContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IML4DListener typedListener = listener as IML4DListener;
			if (typedListener != null) typedListener.EnterIfStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IML4DListener typedListener = listener as IML4DListener;
			if (typedListener != null) typedListener.ExitIfStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IML4DVisitor<TResult> typedVisitor = visitor as IML4DVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GradientsStmtContext : StmtContext {
		public IToken tensor;
		public IToken _ID;
		public IList<IToken> _gradvar = new List<IToken>();
		public IList<IToken> _gradtensor = new List<IToken>();
		public LinesContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRADIENTS() { return GetToken(ML4DParser.GRADIENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LPAREN() { return GetTokens(ML4DParser.LPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN(int i) {
			return GetToken(ML4DParser.LPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ML4DParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ML4DParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RPAREN() { return GetTokens(ML4DParser.RPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN(int i) {
			return GetToken(ML4DParser.RPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(ML4DParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(ML4DParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(ML4DParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(ML4DParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(ML4DParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LinesContext lines() {
			return GetRuleContext<LinesContext>(0);
		}
		public GradientsStmtContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IML4DListener typedListener = listener as IML4DListener;
			if (typedListener != null) typedListener.EnterGradientsStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IML4DListener typedListener = listener as IML4DListener;
			if (typedListener != null) typedListener.ExitGradientsStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IML4DVisitor<TResult> typedVisitor = visitor as IML4DVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGradientsStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignStmtContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public Assign_exprContext assign_expr() {
			return GetRuleContext<Assign_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(ML4DParser.SEMICOLON, 0); }
		public AssignStmtContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IML4DListener typedListener = listener as IML4DListener;
			if (typedListener != null) typedListener.EnterAssignStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IML4DListener typedListener = listener as IML4DListener;
			if (typedListener != null) typedListener.ExitAssignStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IML4DVisitor<TResult> typedVisitor = visitor as IML4DVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReturnStmtContext : StmtContext {
		public Bool_exprContext inner;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(ML4DParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(ML4DParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Bool_exprContext bool_expr() {
			return GetRuleContext<Bool_exprContext>(0);
		}
		public ReturnStmtContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IML4DListener typedListener = listener as IML4DListener;
			if (typedListener != null) typedListener.EnterReturnStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IML4DListener typedListener = listener as IML4DListener;
			if (typedListener != null) typedListener.ExitReturnStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IML4DVisitor<TResult> typedVisitor = visitor as IML4DVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncStmtContext : StmtContext {
		public IToken id;
		public Bool_exprContext _bool_expr;
		public IList<Bool_exprContext> _argexpr = new List<Bool_exprContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ML4DParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ML4DParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(ML4DParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(ML4DParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Bool_exprContext[] bool_expr() {
			return GetRuleContexts<Bool_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bool_exprContext bool_expr(int i) {
			return GetRuleContext<Bool_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ML4DParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ML4DParser.COMMA, i);
		}
		public FuncStmtContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IML4DListener typedListener = listener as IML4DListener;
			if (typedListener != null) typedListener.EnterFuncStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IML4DListener typedListener = listener as IML4DListener;
			if (typedListener != null) typedListener.ExitFuncStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IML4DVisitor<TResult> typedVisitor = visitor as IML4DVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtContext stmt() {
		StmtContext _localctx = new StmtContext(Context, State);
		EnterRule(_localctx, 6, RULE_stmt);
		int _la;
		try {
			int _alt;
			State = 193;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				_localctx = new IfStmtContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 99;
				Match(IF);
				State = 100;
				Match(LPAREN);
				State = 101;
				((IfStmtContext)_localctx)._bool_expr = bool_expr(0);
				((IfStmtContext)_localctx)._pred.Add(((IfStmtContext)_localctx)._bool_expr);
				State = 102;
				Match(RPAREN);
				State = 103;
				Match(LBRACE);
				State = 104;
				((IfStmtContext)_localctx)._lines = lines();
				((IfStmtContext)_localctx)._body.Add(((IfStmtContext)_localctx)._lines);
				State = 105;
				Match(RBRACE);
				State = 117;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 106;
						Match(ELSE);
						State = 107;
						Match(IF);
						State = 108;
						Match(LPAREN);
						State = 109;
						((IfStmtContext)_localctx)._bool_expr = bool_expr(0);
						((IfStmtContext)_localctx)._pred.Add(((IfStmtContext)_localctx)._bool_expr);
						State = 110;
						Match(RPAREN);
						State = 111;
						Match(LBRACE);
						State = 112;
						((IfStmtContext)_localctx)._lines = lines();
						((IfStmtContext)_localctx)._body.Add(((IfStmtContext)_localctx)._lines);
						State = 113;
						Match(RBRACE);
						}
						} 
					}
					State = 119;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
				}
				State = 125;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELSE) {
					{
					State = 120;
					Match(ELSE);
					State = 121;
					Match(LBRACE);
					State = 122;
					((IfStmtContext)_localctx)._lines = lines();
					((IfStmtContext)_localctx)._body.Add(((IfStmtContext)_localctx)._lines);
					State = 123;
					Match(RBRACE);
					}
				}

				}
				break;
			case 2:
				_localctx = new ForStmtContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 127;
				Match(FOR);
				State = 128;
				Match(LPAREN);
				State = 129;
				((ForStmtContext)_localctx).init = dcl();
				State = 130;
				((ForStmtContext)_localctx).pred = bool_expr(0);
				State = 131;
				Match(SEMICOLON);
				State = 132;
				((ForStmtContext)_localctx).final = assign_expr();
				State = 133;
				Match(RPAREN);
				State = 134;
				Match(LBRACE);
				State = 135;
				((ForStmtContext)_localctx).body = lines();
				State = 136;
				Match(RBRACE);
				}
				break;
			case 3:
				_localctx = new WhileStmtContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 138;
				Match(WHILE);
				State = 139;
				Match(LPAREN);
				State = 140;
				((WhileStmtContext)_localctx).pred = bool_expr(0);
				State = 141;
				Match(RPAREN);
				State = 142;
				Match(LBRACE);
				State = 143;
				((WhileStmtContext)_localctx).body = lines();
				State = 144;
				Match(RBRACE);
				}
				break;
			case 4:
				_localctx = new ReturnStmtContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 146;
				Match(RETURN);
				State = 148;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NOT) | (1L << MINUS) | (1L << LPAREN) | (1L << BOOLVAL) | (1L << INUM) | (1L << FNUM) | (1L << ID))) != 0)) {
					{
					State = 147;
					((ReturnStmtContext)_localctx).inner = bool_expr(0);
					}
				}

				State = 150;
				Match(SEMICOLON);
				}
				break;
			case 5:
				_localctx = new FuncStmtContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 151;
				((FuncStmtContext)_localctx).id = Match(ID);
				State = 152;
				Match(LPAREN);
				State = 161;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NOT) | (1L << MINUS) | (1L << LPAREN) | (1L << BOOLVAL) | (1L << INUM) | (1L << FNUM) | (1L << ID))) != 0)) {
					{
					State = 153;
					((FuncStmtContext)_localctx)._bool_expr = bool_expr(0);
					((FuncStmtContext)_localctx)._argexpr.Add(((FuncStmtContext)_localctx)._bool_expr);
					State = 158;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 154;
						Match(COMMA);
						State = 155;
						((FuncStmtContext)_localctx)._bool_expr = bool_expr(0);
						((FuncStmtContext)_localctx)._argexpr.Add(((FuncStmtContext)_localctx)._bool_expr);
						}
						}
						State = 160;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 163;
				Match(RPAREN);
				State = 164;
				Match(SEMICOLON);
				}
				break;
			case 6:
				_localctx = new GradientsStmtContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 165;
				Match(GRADIENTS);
				State = 166;
				Match(LPAREN);
				State = 167;
				((GradientsStmtContext)_localctx).tensor = Match(ID);
				State = 168;
				Match(COMMA);
				State = 169;
				Match(LPAREN);
				State = 170;
				((GradientsStmtContext)_localctx)._ID = Match(ID);
				((GradientsStmtContext)_localctx)._gradvar.Add(((GradientsStmtContext)_localctx)._ID);
				State = 171;
				Match(T__0);
				State = 172;
				((GradientsStmtContext)_localctx)._ID = Match(ID);
				((GradientsStmtContext)_localctx)._gradtensor.Add(((GradientsStmtContext)_localctx)._ID);
				State = 179;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 173;
					Match(COMMA);
					State = 174;
					((GradientsStmtContext)_localctx)._ID = Match(ID);
					((GradientsStmtContext)_localctx)._gradvar.Add(((GradientsStmtContext)_localctx)._ID);
					State = 175;
					Match(T__0);
					State = 176;
					((GradientsStmtContext)_localctx)._ID = Match(ID);
					((GradientsStmtContext)_localctx)._gradtensor.Add(((GradientsStmtContext)_localctx)._ID);
					}
					}
					State = 181;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 182;
				Match(RPAREN);
				State = 183;
				Match(COMMA);
				State = 184;
				Match(LBRACE);
				State = 185;
				((GradientsStmtContext)_localctx).body = lines();
				State = 186;
				Match(RBRACE);
				State = 187;
				Match(RPAREN);
				State = 188;
				Match(SEMICOLON);
				}
				break;
			case 7:
				_localctx = new AssignStmtContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 190;
				assign_expr();
				State = 191;
				Match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assign_exprContext : ParserRuleContext {
		public IToken id;
		public IToken op;
		public Bool_exprContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(ML4DParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(ML4DParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Bool_exprContext bool_expr() {
			return GetRuleContext<Bool_exprContext>(0);
		}
		public Assign_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IML4DListener typedListener = listener as IML4DListener;
			if (typedListener != null) typedListener.EnterAssign_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IML4DListener typedListener = listener as IML4DListener;
			if (typedListener != null) typedListener.ExitAssign_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IML4DVisitor<TResult> typedVisitor = visitor as IML4DVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssign_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assign_exprContext assign_expr() {
		Assign_exprContext _localctx = new Assign_exprContext(Context, State);
		EnterRule(_localctx, 8, RULE_assign_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195;
			_localctx.id = Match(ID);
			State = 196;
			_localctx.op = Match(ASSIGN);
			State = 197;
			_localctx.right = bool_expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bool_exprContext : ParserRuleContext {
		public Bool_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool_expr; } }
	 
		public Bool_exprContext() { }
		public virtual void CopyFrom(Bool_exprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExprExprContext : Bool_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ExprExprContext(Bool_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IML4DListener typedListener = listener as IML4DListener;
			if (typedListener != null) typedListener.EnterExprExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IML4DListener typedListener = listener as IML4DListener;
			if (typedListener != null) typedListener.ExitExprExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IML4DVisitor<TResult> typedVisitor = visitor as IML4DVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InfixRelationalExprContext : Bool_exprContext {
		public ExprContext left;
		public IToken op;
		public ExprContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTHAN() { return GetToken(ML4DParser.LTHAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LETHAN() { return GetToken(ML4DParser.LETHAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTHAN() { return GetToken(ML4DParser.GTHAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GETHAN() { return GetToken(ML4DParser.GETHAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(ML4DParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTEQUALS() { return GetToken(ML4DParser.NOTEQUALS, 0); }
		public InfixRelationalExprContext(Bool_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IML4DListener typedListener = listener as IML4DListener;
			if (typedListener != null) typedListener.EnterInfixRelationalExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IML4DListener typedListener = listener as IML4DListener;
			if (typedListener != null) typedListener.ExitInfixRelationalExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IML4DVisitor<TResult> typedVisitor = visitor as IML4DVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInfixRelationalExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InfixBoolExprContext : Bool_exprContext {
		public Bool_exprContext left;
		public IToken op;
		public Bool_exprContext right;
		[System.Diagnostics.DebuggerNonUserCode] public Bool_exprContext[] bool_expr() {
			return GetRuleContexts<Bool_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bool_exprContext bool_expr(int i) {
			return GetRuleContext<Bool_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(ML4DParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(ML4DParser.OR, 0); }
		public InfixBoolExprContext(Bool_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IML4DListener typedListener = listener as IML4DListener;
			if (typedListener != null) typedListener.EnterInfixBoolExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IML4DListener typedListener = listener as IML4DListener;
			if (typedListener != null) typedListener.ExitInfixBoolExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IML4DVisitor<TResult> typedVisitor = visitor as IML4DVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInfixBoolExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bool_exprContext bool_expr() {
		return bool_expr(0);
	}

	private Bool_exprContext bool_expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Bool_exprContext _localctx = new Bool_exprContext(Context, _parentState);
		Bool_exprContext _prevctx = _localctx;
		int _startState = 10;
		EnterRecursionRule(_localctx, 10, RULE_bool_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 209;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				{
				_localctx = new InfixRelationalExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 200;
				((InfixRelationalExprContext)_localctx).left = expr(0);
				State = 201;
				((InfixRelationalExprContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GTHAN) | (1L << LTHAN) | (1L << GETHAN) | (1L << LETHAN))) != 0)) ) {
					((InfixRelationalExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 202;
				((InfixRelationalExprContext)_localctx).right = expr(0);
				}
				break;
			case 2:
				{
				_localctx = new InfixRelationalExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 204;
				((InfixRelationalExprContext)_localctx).left = expr(0);
				State = 205;
				((InfixRelationalExprContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==EQUALS || _la==NOTEQUALS) ) {
					((InfixRelationalExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 206;
				((InfixRelationalExprContext)_localctx).right = expr(0);
				}
				break;
			case 3:
				{
				_localctx = new ExprExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 208;
				expr(0);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 219;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 217;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
					case 1:
						{
						_localctx = new InfixBoolExprContext(new Bool_exprContext(_parentctx, _parentState));
						((InfixBoolExprContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_bool_expr);
						State = 211;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 212;
						((InfixBoolExprContext)_localctx).op = Match(AND);
						State = 213;
						((InfixBoolExprContext)_localctx).right = bool_expr(4);
						}
						break;
					case 2:
						{
						_localctx = new InfixBoolExprContext(new Bool_exprContext(_parentctx, _parentState));
						((InfixBoolExprContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_bool_expr);
						State = 214;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 215;
						((InfixBoolExprContext)_localctx).op = Match(OR);
						State = 216;
						((InfixBoolExprContext)_localctx).right = bool_expr(3);
						}
						break;
					}
					} 
				}
				State = 221;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UnaryExprContext : ExprContext {
		public IToken op;
		public ExprContext right;
		public Bool_exprContext inner;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(ML4DParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(ML4DParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Bool_exprContext bool_expr() {
			return GetRuleContext<Bool_exprContext>(0);
		}
		public UnaryExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IML4DListener typedListener = listener as IML4DListener;
			if (typedListener != null) typedListener.EnterUnaryExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IML4DListener typedListener = listener as IML4DListener;
			if (typedListener != null) typedListener.ExitUnaryExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IML4DVisitor<TResult> typedVisitor = visitor as IML4DVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncExprContext : ExprContext {
		public IToken id;
		public Bool_exprContext _bool_expr;
		public IList<Bool_exprContext> _argexpr = new List<Bool_exprContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ML4DParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ML4DParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(ML4DParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Bool_exprContext[] bool_expr() {
			return GetRuleContexts<Bool_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bool_exprContext bool_expr(int i) {
			return GetRuleContext<Bool_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ML4DParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ML4DParser.COMMA, i);
		}
		public FuncExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IML4DListener typedListener = listener as IML4DListener;
			if (typedListener != null) typedListener.EnterFuncExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IML4DListener typedListener = listener as IML4DListener;
			if (typedListener != null) typedListener.ExitFuncExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IML4DVisitor<TResult> typedVisitor = visitor as IML4DVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeExprContext : ExprContext {
		public IToken value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INUM() { return GetToken(ML4DParser.INUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FNUM() { return GetToken(ML4DParser.FNUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLVAL() { return GetToken(ML4DParser.BOOLVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(ML4DParser.ID, 0); }
		public TypeExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IML4DListener typedListener = listener as IML4DListener;
			if (typedListener != null) typedListener.EnterTypeExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IML4DListener typedListener = listener as IML4DListener;
			if (typedListener != null) typedListener.ExitTypeExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IML4DVisitor<TResult> typedVisitor = visitor as IML4DVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InfixValueExprContext : ExprContext {
		public ExprContext left;
		public IToken op;
		public ExprContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POW() { return GetToken(ML4DParser.POW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL() { return GetToken(ML4DParser.MUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(ML4DParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(ML4DParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(ML4DParser.MINUS, 0); }
		public InfixValueExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IML4DListener typedListener = listener as IML4DListener;
			if (typedListener != null) typedListener.EnterInfixValueExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IML4DListener typedListener = listener as IML4DListener;
			if (typedListener != null) typedListener.ExitInfixValueExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IML4DVisitor<TResult> typedVisitor = visitor as IML4DVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInfixValueExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParensExprContext : ExprContext {
		public Bool_exprContext inner;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ML4DParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ML4DParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Bool_exprContext bool_expr() {
			return GetRuleContext<Bool_exprContext>(0);
		}
		public ParensExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IML4DListener typedListener = listener as IML4DListener;
			if (typedListener != null) typedListener.EnterParensExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IML4DListener typedListener = listener as IML4DListener;
			if (typedListener != null) typedListener.ExitParensExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IML4DVisitor<TResult> typedVisitor = visitor as IML4DVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParensExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 12;
		EnterRecursionRule(_localctx, 12, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 245;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				{
				_localctx = new ParensExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 223;
				Match(LPAREN);
				State = 224;
				((ParensExprContext)_localctx).inner = bool_expr(0);
				State = 225;
				Match(RPAREN);
				}
				break;
			case 2:
				{
				_localctx = new UnaryExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 227;
				((UnaryExprContext)_localctx).op = Match(MINUS);
				State = 228;
				((UnaryExprContext)_localctx).right = expr(7);
				}
				break;
			case 3:
				{
				_localctx = new UnaryExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 229;
				((UnaryExprContext)_localctx).op = Match(NOT);
				State = 230;
				((UnaryExprContext)_localctx).inner = bool_expr(0);
				}
				break;
			case 4:
				{
				_localctx = new FuncExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 231;
				((FuncExprContext)_localctx).id = Match(ID);
				State = 232;
				Match(LPAREN);
				State = 241;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NOT) | (1L << MINUS) | (1L << LPAREN) | (1L << BOOLVAL) | (1L << INUM) | (1L << FNUM) | (1L << ID))) != 0)) {
					{
					State = 233;
					((FuncExprContext)_localctx)._bool_expr = bool_expr(0);
					((FuncExprContext)_localctx)._argexpr.Add(((FuncExprContext)_localctx)._bool_expr);
					State = 238;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 234;
						Match(COMMA);
						State = 235;
						((FuncExprContext)_localctx)._bool_expr = bool_expr(0);
						((FuncExprContext)_localctx)._argexpr.Add(((FuncExprContext)_localctx)._bool_expr);
						}
						}
						State = 240;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 243;
				Match(RPAREN);
				}
				break;
			case 5:
				{
				_localctx = new TypeExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 244;
				((TypeExprContext)_localctx).value = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLVAL) | (1L << INUM) | (1L << FNUM) | (1L << ID))) != 0)) ) {
					((TypeExprContext)_localctx).value = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 258;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 256;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
					case 1:
						{
						_localctx = new InfixValueExprContext(new ExprContext(_parentctx, _parentState));
						((InfixValueExprContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 247;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 248;
						((InfixValueExprContext)_localctx).op = Match(POW);
						State = 249;
						((InfixValueExprContext)_localctx).right = expr(5);
						}
						break;
					case 2:
						{
						_localctx = new InfixValueExprContext(new ExprContext(_parentctx, _parentState));
						((InfixValueExprContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 250;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 251;
						((InfixValueExprContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==MUL || _la==DIV) ) {
							((InfixValueExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 252;
						((InfixValueExprContext)_localctx).right = expr(5);
						}
						break;
					case 3:
						{
						_localctx = new InfixValueExprContext(new ExprContext(_parentctx, _parentState));
						((InfixValueExprContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 253;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 254;
						((InfixValueExprContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							((InfixValueExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 255;
						((InfixValueExprContext)_localctx).right = expr(4);
						}
						break;
					}
					} 
				}
				State = 260;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TypesContext : ParserRuleContext {
		public IToken type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(ML4DParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(ML4DParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(ML4DParser.DOUBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(ML4DParser.VOID, 0); }
		public TypesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_types; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IML4DListener typedListener = listener as IML4DListener;
			if (typedListener != null) typedListener.EnterTypes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IML4DListener typedListener = listener as IML4DListener;
			if (typedListener != null) typedListener.ExitTypes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IML4DVisitor<TResult> typedVisitor = visitor as IML4DVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypesContext types() {
		TypesContext _localctx = new TypesContext(Context, State);
		EnterRule(_localctx, 14, RULE_types);
		try {
			State = 265;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 261;
				_localctx.type = Match(INT);
				}
				break;
			case BOOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 262;
				_localctx.type = Match(BOOL);
				}
				break;
			case DOUBLE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 263;
				_localctx.type = Match(DOUBLE);
				}
				break;
			case VOID:
				EnterOuterAlt(_localctx, 4);
				{
				State = 264;
				_localctx.type = Match(VOID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 5: return bool_expr_sempred((Bool_exprContext)_localctx, predIndex);
		case 6: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool bool_expr_sempred(Bool_exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		case 1: return Precpred(Context, 2);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 5);
		case 3: return Precpred(Context, 4);
		case 4: return Precpred(Context, 3);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', ',', '\x10E', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x3', '\x2', '\x3', '\x2', '\x6', '\x2', '\x15', 
		'\n', '\x2', '\r', '\x2', '\xE', '\x2', '\x16', '\x3', '\x2', '\x5', '\x2', 
		'\x1A', '\n', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '-', '\n', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\a', '\x3', ':', '\n', '\x3', '\f', '\x3', '\xE', 
		'\x3', '=', '\v', '\x3', '\x5', '\x3', '?', '\n', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', 
		'\x46', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\a', '\x4', 'M', '\n', '\x4', '\f', '\x4', '\xE', 
		'\x4', 'P', '\v', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', 'X', '\n', '\x4', '\f', 
		'\x4', '\xE', '\x4', '[', '\v', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', 
		'\x4', '_', '\n', '\x4', '\f', '\x4', '\xE', '\x4', '\x62', '\v', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', 'v', '\n', '\x5', 
		'\f', '\x5', '\xE', '\x5', 'y', '\v', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x80', '\n', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x5', '\x5', '\x97', '\n', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\a', '\x5', '\x9F', '\n', '\x5', '\f', '\x5', '\xE', '\x5', '\xA2', '\v', 
		'\x5', '\x5', '\x5', '\xA4', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\a', '\x5', '\xB4', '\n', '\x5', '\f', '\x5', 
		'\xE', '\x5', '\xB7', '\v', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\xC4', 
		'\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\xD4', 
		'\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\a', '\a', '\xDC', '\n', '\a', '\f', '\a', '\xE', 
		'\a', '\xDF', '\v', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', 
		'\b', '\xEF', '\n', '\b', '\f', '\b', '\xE', '\b', '\xF2', '\v', '\b', 
		'\x5', '\b', '\xF4', '\n', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', 
		'\xF8', '\n', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', 
		'\b', '\x103', '\n', '\b', '\f', '\b', '\xE', '\b', '\x106', '\v', '\b', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\x10C', 
		'\n', '\t', '\x3', '\t', '\x2', '\x4', '\f', '\xE', '\n', '\x2', '\x4', 
		'\x6', '\b', '\n', '\f', '\xE', '\x10', '\x2', '\a', '\x3', '\x2', '\x11', 
		'\x14', '\x3', '\x2', '\xF', '\x10', '\x3', '\x2', '\'', '*', '\x3', '\x2', 
		'\v', '\f', '\x3', '\x2', '\r', '\xE', '\x2', '\x12C', '\x2', '\x19', 
		'\x3', '\x2', '\x2', '\x2', '\x4', '\x45', '\x3', '\x2', '\x2', '\x2', 
		'\x6', 'G', '\x3', '\x2', '\x2', '\x2', '\b', '\xC3', '\x3', '\x2', '\x2', 
		'\x2', '\n', '\xC5', '\x3', '\x2', '\x2', '\x2', '\f', '\xD3', '\x3', 
		'\x2', '\x2', '\x2', '\xE', '\xF7', '\x3', '\x2', '\x2', '\x2', '\x10', 
		'\x10B', '\x3', '\x2', '\x2', '\x2', '\x12', '\x15', '\x5', '\x4', '\x3', 
		'\x2', '\x13', '\x15', '\x5', '\b', '\x5', '\x2', '\x14', '\x12', '\x3', 
		'\x2', '\x2', '\x2', '\x14', '\x13', '\x3', '\x2', '\x2', '\x2', '\x15', 
		'\x16', '\x3', '\x2', '\x2', '\x2', '\x16', '\x14', '\x3', '\x2', '\x2', 
		'\x2', '\x16', '\x17', '\x3', '\x2', '\x2', '\x2', '\x17', '\x1A', '\x3', 
		'\x2', '\x2', '\x2', '\x18', '\x1A', '\a', '\x2', '\x2', '\x3', '\x19', 
		'\x14', '\x3', '\x2', '\x2', '\x2', '\x19', '\x18', '\x3', '\x2', '\x2', 
		'\x2', '\x1A', '\x3', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x1C', '\x5', 
		'\x10', '\t', '\x2', '\x1C', '\x1D', '\a', '*', '\x2', '\x2', '\x1D', 
		'\x1E', '\a', '\x17', '\x2', '\x2', '\x1E', '\x1F', '\x5', '\f', '\a', 
		'\x2', '\x1F', ' ', '\a', '\x1F', '\x2', '\x2', ' ', '\x46', '\x3', '\x2', 
		'\x2', '\x2', '!', '\"', '\a', '\b', '\x2', '\x2', '\"', '#', '\a', '*', 
		'\x2', '\x2', '#', '$', '\a', '\x1C', '\x2', '\x2', '$', '%', '\a', '(', 
		'\x2', '\x2', '%', '&', '\a', '\x1D', '\x2', '\x2', '&', '\'', '\a', '\x1C', 
		'\x2', '\x2', '\'', '(', '\a', '(', '\x2', '\x2', '(', ')', '\a', '\x1D', 
		'\x2', '\x2', ')', ',', '\a', '\x17', '\x2', '\x2', '*', '-', '\x5', '\x6', 
		'\x4', '\x2', '+', '-', '\x5', '\f', '\a', '\x2', ',', '*', '\x3', '\x2', 
		'\x2', '\x2', ',', '+', '\x3', '\x2', '\x2', '\x2', '-', '.', '\x3', '\x2', 
		'\x2', '\x2', '.', '/', '\a', '\x1F', '\x2', '\x2', '/', '\x46', '\x3', 
		'\x2', '\x2', '\x2', '\x30', '\x31', '\x5', '\x10', '\t', '\x2', '\x31', 
		'\x32', '\a', '*', '\x2', '\x2', '\x32', '>', '\a', '\x18', '\x2', '\x2', 
		'\x33', '\x34', '\x5', '\x10', '\t', '\x2', '\x34', ';', '\a', '*', '\x2', 
		'\x2', '\x35', '\x36', '\a', '\x1E', '\x2', '\x2', '\x36', '\x37', '\x5', 
		'\x10', '\t', '\x2', '\x37', '\x38', '\a', '*', '\x2', '\x2', '\x38', 
		':', '\x3', '\x2', '\x2', '\x2', '\x39', '\x35', '\x3', '\x2', '\x2', 
		'\x2', ':', '=', '\x3', '\x2', '\x2', '\x2', ';', '\x39', '\x3', '\x2', 
		'\x2', '\x2', ';', '<', '\x3', '\x2', '\x2', '\x2', '<', '?', '\x3', '\x2', 
		'\x2', '\x2', '=', ';', '\x3', '\x2', '\x2', '\x2', '>', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '>', '?', '\x3', '\x2', '\x2', '\x2', '?', '@', '\x3', 
		'\x2', '\x2', '\x2', '@', '\x41', '\a', '\x19', '\x2', '\x2', '\x41', 
		'\x42', '\a', '\x1A', '\x2', '\x2', '\x42', '\x43', '\x5', '\x2', '\x2', 
		'\x2', '\x43', '\x44', '\a', '\x1B', '\x2', '\x2', '\x44', '\x46', '\x3', 
		'\x2', '\x2', '\x2', '\x45', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x45', 
		'!', '\x3', '\x2', '\x2', '\x2', '\x45', '\x30', '\x3', '\x2', '\x2', 
		'\x2', '\x46', '\x5', '\x3', '\x2', '\x2', '\x2', 'G', 'H', '\a', '\x1A', 
		'\x2', '\x2', 'H', 'I', '\a', '\x1C', '\x2', '\x2', 'I', 'N', '\x5', '\xE', 
		'\b', '\x2', 'J', 'K', '\a', '\x1E', '\x2', '\x2', 'K', 'M', '\x5', '\xE', 
		'\b', '\x2', 'L', 'J', '\x3', '\x2', '\x2', '\x2', 'M', 'P', '\x3', '\x2', 
		'\x2', '\x2', 'N', 'L', '\x3', '\x2', '\x2', '\x2', 'N', 'O', '\x3', '\x2', 
		'\x2', '\x2', 'O', 'Q', '\x3', '\x2', '\x2', '\x2', 'P', 'N', '\x3', '\x2', 
		'\x2', '\x2', 'Q', '`', '\a', '\x1D', '\x2', '\x2', 'R', 'S', '\a', '\x1E', 
		'\x2', '\x2', 'S', 'T', '\a', '\x1C', '\x2', '\x2', 'T', 'Y', '\x5', '\xE', 
		'\b', '\x2', 'U', 'V', '\a', '\x1E', '\x2', '\x2', 'V', 'X', '\x5', '\xE', 
		'\b', '\x2', 'W', 'U', '\x3', '\x2', '\x2', '\x2', 'X', '[', '\x3', '\x2', 
		'\x2', '\x2', 'Y', 'W', '\x3', '\x2', '\x2', '\x2', 'Y', 'Z', '\x3', '\x2', 
		'\x2', '\x2', 'Z', '\\', '\x3', '\x2', '\x2', '\x2', '[', 'Y', '\x3', 
		'\x2', '\x2', '\x2', '\\', ']', '\a', '\x1D', '\x2', '\x2', ']', '_', 
		'\x3', '\x2', '\x2', '\x2', '^', 'R', '\x3', '\x2', '\x2', '\x2', '_', 
		'\x62', '\x3', '\x2', '\x2', '\x2', '`', '^', '\x3', '\x2', '\x2', '\x2', 
		'`', '\x61', '\x3', '\x2', '\x2', '\x2', '\x61', '\x63', '\x3', '\x2', 
		'\x2', '\x2', '\x62', '`', '\x3', '\x2', '\x2', '\x2', '\x63', '\x64', 
		'\a', '\x1B', '\x2', '\x2', '\x64', '\a', '\x3', '\x2', '\x2', '\x2', 
		'\x65', '\x66', '\a', ' ', '\x2', '\x2', '\x66', 'g', '\a', '\x18', '\x2', 
		'\x2', 'g', 'h', '\x5', '\f', '\a', '\x2', 'h', 'i', '\a', '\x19', '\x2', 
		'\x2', 'i', 'j', '\a', '\x1A', '\x2', '\x2', 'j', 'k', '\x5', '\x2', '\x2', 
		'\x2', 'k', 'w', '\a', '\x1B', '\x2', '\x2', 'l', 'm', '\a', '!', '\x2', 
		'\x2', 'm', 'n', '\a', ' ', '\x2', '\x2', 'n', 'o', '\a', '\x18', '\x2', 
		'\x2', 'o', 'p', '\x5', '\f', '\a', '\x2', 'p', 'q', '\a', '\x19', '\x2', 
		'\x2', 'q', 'r', '\a', '\x1A', '\x2', '\x2', 'r', 's', '\x5', '\x2', '\x2', 
		'\x2', 's', 't', '\a', '\x1B', '\x2', '\x2', 't', 'v', '\x3', '\x2', '\x2', 
		'\x2', 'u', 'l', '\x3', '\x2', '\x2', '\x2', 'v', 'y', '\x3', '\x2', '\x2', 
		'\x2', 'w', 'u', '\x3', '\x2', '\x2', '\x2', 'w', 'x', '\x3', '\x2', '\x2', 
		'\x2', 'x', '\x7F', '\x3', '\x2', '\x2', '\x2', 'y', 'w', '\x3', '\x2', 
		'\x2', '\x2', 'z', '{', '\a', '!', '\x2', '\x2', '{', '|', '\a', '\x1A', 
		'\x2', '\x2', '|', '}', '\x5', '\x2', '\x2', '\x2', '}', '~', '\a', '\x1B', 
		'\x2', '\x2', '~', '\x80', '\x3', '\x2', '\x2', '\x2', '\x7F', 'z', '\x3', 
		'\x2', '\x2', '\x2', '\x7F', '\x80', '\x3', '\x2', '\x2', '\x2', '\x80', 
		'\xC4', '\x3', '\x2', '\x2', '\x2', '\x81', '\x82', '\a', '#', '\x2', 
		'\x2', '\x82', '\x83', '\a', '\x18', '\x2', '\x2', '\x83', '\x84', '\x5', 
		'\x4', '\x3', '\x2', '\x84', '\x85', '\x5', '\f', '\a', '\x2', '\x85', 
		'\x86', '\a', '\x1F', '\x2', '\x2', '\x86', '\x87', '\x5', '\n', '\x6', 
		'\x2', '\x87', '\x88', '\a', '\x19', '\x2', '\x2', '\x88', '\x89', '\a', 
		'\x1A', '\x2', '\x2', '\x89', '\x8A', '\x5', '\x2', '\x2', '\x2', '\x8A', 
		'\x8B', '\a', '\x1B', '\x2', '\x2', '\x8B', '\xC4', '\x3', '\x2', '\x2', 
		'\x2', '\x8C', '\x8D', '\a', '\"', '\x2', '\x2', '\x8D', '\x8E', '\a', 
		'\x18', '\x2', '\x2', '\x8E', '\x8F', '\x5', '\f', '\a', '\x2', '\x8F', 
		'\x90', '\a', '\x19', '\x2', '\x2', '\x90', '\x91', '\a', '\x1A', '\x2', 
		'\x2', '\x91', '\x92', '\x5', '\x2', '\x2', '\x2', '\x92', '\x93', '\a', 
		'\x1B', '\x2', '\x2', '\x93', '\xC4', '\x3', '\x2', '\x2', '\x2', '\x94', 
		'\x96', '\a', '$', '\x2', '\x2', '\x95', '\x97', '\x5', '\f', '\a', '\x2', 
		'\x96', '\x95', '\x3', '\x2', '\x2', '\x2', '\x96', '\x97', '\x3', '\x2', 
		'\x2', '\x2', '\x97', '\x98', '\x3', '\x2', '\x2', '\x2', '\x98', '\xC4', 
		'\a', '\x1F', '\x2', '\x2', '\x99', '\x9A', '\a', '*', '\x2', '\x2', '\x9A', 
		'\xA3', '\a', '\x18', '\x2', '\x2', '\x9B', '\xA0', '\x5', '\f', '\a', 
		'\x2', '\x9C', '\x9D', '\a', '\x1E', '\x2', '\x2', '\x9D', '\x9F', '\x5', 
		'\f', '\a', '\x2', '\x9E', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x9F', 
		'\xA2', '\x3', '\x2', '\x2', '\x2', '\xA0', '\x9E', '\x3', '\x2', '\x2', 
		'\x2', '\xA0', '\xA1', '\x3', '\x2', '\x2', '\x2', '\xA1', '\xA4', '\x3', 
		'\x2', '\x2', '\x2', '\xA2', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xA3', 
		'\x9B', '\x3', '\x2', '\x2', '\x2', '\xA3', '\xA4', '\x3', '\x2', '\x2', 
		'\x2', '\xA4', '\xA5', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA6', '\a', 
		'\x19', '\x2', '\x2', '\xA6', '\xC4', '\a', '\x1F', '\x2', '\x2', '\xA7', 
		'\xA8', '\a', '%', '\x2', '\x2', '\xA8', '\xA9', '\a', '\x18', '\x2', 
		'\x2', '\xA9', '\xAA', '\a', '*', '\x2', '\x2', '\xAA', '\xAB', '\a', 
		'\x1E', '\x2', '\x2', '\xAB', '\xAC', '\a', '\x18', '\x2', '\x2', '\xAC', 
		'\xAD', '\a', '*', '\x2', '\x2', '\xAD', '\xAE', '\a', '\x3', '\x2', '\x2', 
		'\xAE', '\xB5', '\a', '*', '\x2', '\x2', '\xAF', '\xB0', '\a', '\x1E', 
		'\x2', '\x2', '\xB0', '\xB1', '\a', '*', '\x2', '\x2', '\xB1', '\xB2', 
		'\a', '\x3', '\x2', '\x2', '\xB2', '\xB4', '\a', '*', '\x2', '\x2', '\xB3', 
		'\xAF', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xB7', '\x3', '\x2', '\x2', 
		'\x2', '\xB5', '\xB3', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB6', '\x3', 
		'\x2', '\x2', '\x2', '\xB6', '\xB8', '\x3', '\x2', '\x2', '\x2', '\xB7', 
		'\xB5', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xB9', '\a', '\x19', '\x2', 
		'\x2', '\xB9', '\xBA', '\a', '\x1E', '\x2', '\x2', '\xBA', '\xBB', '\a', 
		'\x1A', '\x2', '\x2', '\xBB', '\xBC', '\x5', '\x2', '\x2', '\x2', '\xBC', 
		'\xBD', '\a', '\x1B', '\x2', '\x2', '\xBD', '\xBE', '\a', '\x19', '\x2', 
		'\x2', '\xBE', '\xBF', '\a', '\x1F', '\x2', '\x2', '\xBF', '\xC4', '\x3', 
		'\x2', '\x2', '\x2', '\xC0', '\xC1', '\x5', '\n', '\x6', '\x2', '\xC1', 
		'\xC2', '\a', '\x1F', '\x2', '\x2', '\xC2', '\xC4', '\x3', '\x2', '\x2', 
		'\x2', '\xC3', '\x65', '\x3', '\x2', '\x2', '\x2', '\xC3', '\x81', '\x3', 
		'\x2', '\x2', '\x2', '\xC3', '\x8C', '\x3', '\x2', '\x2', '\x2', '\xC3', 
		'\x94', '\x3', '\x2', '\x2', '\x2', '\xC3', '\x99', '\x3', '\x2', '\x2', 
		'\x2', '\xC3', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xC3', '\xC0', '\x3', 
		'\x2', '\x2', '\x2', '\xC4', '\t', '\x3', '\x2', '\x2', '\x2', '\xC5', 
		'\xC6', '\a', '*', '\x2', '\x2', '\xC6', '\xC7', '\a', '\x17', '\x2', 
		'\x2', '\xC7', '\xC8', '\x5', '\f', '\a', '\x2', '\xC8', '\v', '\x3', 
		'\x2', '\x2', '\x2', '\xC9', '\xCA', '\b', '\a', '\x1', '\x2', '\xCA', 
		'\xCB', '\x5', '\xE', '\b', '\x2', '\xCB', '\xCC', '\t', '\x2', '\x2', 
		'\x2', '\xCC', '\xCD', '\x5', '\xE', '\b', '\x2', '\xCD', '\xD4', '\x3', 
		'\x2', '\x2', '\x2', '\xCE', '\xCF', '\x5', '\xE', '\b', '\x2', '\xCF', 
		'\xD0', '\t', '\x3', '\x2', '\x2', '\xD0', '\xD1', '\x5', '\xE', '\b', 
		'\x2', '\xD1', '\xD4', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xD4', '\x5', 
		'\xE', '\b', '\x2', '\xD3', '\xC9', '\x3', '\x2', '\x2', '\x2', '\xD3', 
		'\xCE', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xD2', '\x3', '\x2', '\x2', 
		'\x2', '\xD4', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xD6', '\f', 
		'\x5', '\x2', '\x2', '\xD6', '\xD7', '\a', '\x15', '\x2', '\x2', '\xD7', 
		'\xDC', '\x5', '\f', '\a', '\x6', '\xD8', '\xD9', '\f', '\x4', '\x2', 
		'\x2', '\xD9', '\xDA', '\a', '\x16', '\x2', '\x2', '\xDA', '\xDC', '\x5', 
		'\f', '\a', '\x5', '\xDB', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xDB', 
		'\xD8', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xDF', '\x3', '\x2', '\x2', 
		'\x2', '\xDD', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xDE', '\x3', 
		'\x2', '\x2', '\x2', '\xDE', '\r', '\x3', '\x2', '\x2', '\x2', '\xDF', 
		'\xDD', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xE1', '\b', '\b', '\x1', 
		'\x2', '\xE1', '\xE2', '\a', '\x18', '\x2', '\x2', '\xE2', '\xE3', '\x5', 
		'\f', '\a', '\x2', '\xE3', '\xE4', '\a', '\x19', '\x2', '\x2', '\xE4', 
		'\xF8', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xE6', '\a', '\xE', '\x2', 
		'\x2', '\xE6', '\xF8', '\x5', '\xE', '\b', '\t', '\xE7', '\xE8', '\a', 
		'\t', '\x2', '\x2', '\xE8', '\xF8', '\x5', '\f', '\a', '\x2', '\xE9', 
		'\xEA', '\a', '*', '\x2', '\x2', '\xEA', '\xF3', '\a', '\x18', '\x2', 
		'\x2', '\xEB', '\xF0', '\x5', '\f', '\a', '\x2', '\xEC', '\xED', '\a', 
		'\x1E', '\x2', '\x2', '\xED', '\xEF', '\x5', '\f', '\a', '\x2', '\xEE', 
		'\xEC', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xF2', '\x3', '\x2', '\x2', 
		'\x2', '\xF0', '\xEE', '\x3', '\x2', '\x2', '\x2', '\xF0', '\xF1', '\x3', 
		'\x2', '\x2', '\x2', '\xF1', '\xF4', '\x3', '\x2', '\x2', '\x2', '\xF2', 
		'\xF0', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xEB', '\x3', '\x2', '\x2', 
		'\x2', '\xF3', '\xF4', '\x3', '\x2', '\x2', '\x2', '\xF4', '\xF5', '\x3', 
		'\x2', '\x2', '\x2', '\xF5', '\xF8', '\a', '\x19', '\x2', '\x2', '\xF6', 
		'\xF8', '\t', '\x4', '\x2', '\x2', '\xF7', '\xE0', '\x3', '\x2', '\x2', 
		'\x2', '\xF7', '\xE5', '\x3', '\x2', '\x2', '\x2', '\xF7', '\xE7', '\x3', 
		'\x2', '\x2', '\x2', '\xF7', '\xE9', '\x3', '\x2', '\x2', '\x2', '\xF7', 
		'\xF6', '\x3', '\x2', '\x2', '\x2', '\xF8', '\x104', '\x3', '\x2', '\x2', 
		'\x2', '\xF9', '\xFA', '\f', '\a', '\x2', '\x2', '\xFA', '\xFB', '\a', 
		'\n', '\x2', '\x2', '\xFB', '\x103', '\x5', '\xE', '\b', '\a', '\xFC', 
		'\xFD', '\f', '\x6', '\x2', '\x2', '\xFD', '\xFE', '\t', '\x5', '\x2', 
		'\x2', '\xFE', '\x103', '\x5', '\xE', '\b', '\a', '\xFF', '\x100', '\f', 
		'\x5', '\x2', '\x2', '\x100', '\x101', '\t', '\x6', '\x2', '\x2', '\x101', 
		'\x103', '\x5', '\xE', '\b', '\x6', '\x102', '\xF9', '\x3', '\x2', '\x2', 
		'\x2', '\x102', '\xFC', '\x3', '\x2', '\x2', '\x2', '\x102', '\xFF', '\x3', 
		'\x2', '\x2', '\x2', '\x103', '\x106', '\x3', '\x2', '\x2', '\x2', '\x104', 
		'\x102', '\x3', '\x2', '\x2', '\x2', '\x104', '\x105', '\x3', '\x2', '\x2', 
		'\x2', '\x105', '\xF', '\x3', '\x2', '\x2', '\x2', '\x106', '\x104', '\x3', 
		'\x2', '\x2', '\x2', '\x107', '\x10C', '\a', '\x6', '\x2', '\x2', '\x108', 
		'\x10C', '\a', '\a', '\x2', '\x2', '\x109', '\x10C', '\a', '\x5', '\x2', 
		'\x2', '\x10A', '\x10C', '\a', '\x4', '\x2', '\x2', '\x10B', '\x107', 
		'\x3', '\x2', '\x2', '\x2', '\x10B', '\x108', '\x3', '\x2', '\x2', '\x2', 
		'\x10B', '\x109', '\x3', '\x2', '\x2', '\x2', '\x10B', '\x10A', '\x3', 
		'\x2', '\x2', '\x2', '\x10C', '\x11', '\x3', '\x2', '\x2', '\x2', '\x1C', 
		'\x14', '\x16', '\x19', ',', ';', '>', '\x45', 'N', 'Y', '`', 'w', '\x7F', 
		'\x96', '\xA0', '\xA3', '\xB5', '\xC3', '\xD3', '\xDB', '\xDD', '\xF0', 
		'\xF3', '\xF7', '\x102', '\x104', '\x10B',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
