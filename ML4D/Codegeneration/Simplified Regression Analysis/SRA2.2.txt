tensor a[1][1] = { [-1.0] };
tensor b[1][1] = { [2.0] };

bool c = true;
bool d = not c;

int x0 = 0;
int x1 = 1;
int x2 = 2;
int x3 = 3;
int x4 = 4;

int y0 = 0;
int y1 = 1;
int y2 = 2;
int y3 = 3;
int y4 = 4;

double step_size = 0.1;
    
int i = 0;
while (i < 100) {

  tensor y_hat0 = ((a * x + b) - y0)**2;
  tensor y_hat1 = ((a * x + b) - y1)**2;
  tensor y_hat2 = ((a * x + b) - y2)**2;
  tensor y_hat3 = ((a * x + b) - y3)**2;
  tensor y_hat4 = ((a * x + b) - y4)**2;

  tensor loss = (y_hat0 + y_hat1 + y_hat2 + y_hat3 + y_hat4)/5;

  gradients(loss, (aGrads << a, bGrads << b), {
    a = a - (aGrads * step_size);
    b = b - (bGrads * step_size);

    //frees the entire computation graph of loss
  });
  
  i = i + 1;
}